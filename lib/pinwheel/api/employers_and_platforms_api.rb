# #Pinwheel
#
# Pinwheel is the API for Payroll
#
# The version of the OpenAPI document: v2023-11-22
# Contact: support@getpinwheel.com
# Generated by: https://openapi-generator.tech
# Generator version: 7.7.0
#

require "cgi"

module Pinwheel
  class EmployersAndPlatformsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Employer
    # Get an Employer given the employer ID.
    # @param employer_id [String] UUID of the employer.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetEmployerV1EmployersEmployerIdGet200Response]
    def get_employer_v1_employers_employer_id_get(employer_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_employer_v1_employers_employer_id_get_with_http_info(employer_id, pinwheel_version, opts)
      data
    end

    # Get Employer
    # Get an Employer given the employer ID.
    # @param employer_id [String] UUID of the employer.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmployerV1EmployersEmployerIdGet200Response, Integer, Hash)>] GetEmployerV1EmployersEmployerIdGet200Response data, response status code and response headers
    def get_employer_v1_employers_employer_id_get_with_http_info(employer_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmployersAndPlatformsApi.get_employer_v1_employers_employer_id_get ..."
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling EmployersAndPlatformsApi.get_employer_v1_employers_employer_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EmployersAndPlatformsApi.get_employer_v1_employers_employer_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/employers/{employer_id}".sub("{" + "employer_id" + "}", CGI.escape(employer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEmployerV1EmployersEmployerIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EmployersAndPlatformsApi.get_employer_v1_employers_employer_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployersAndPlatformsApi#get_employer_v1_employers_employer_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Platform
    # Get a payroll platform supported by Link.
    # @param platform_id [String] UUID of the platform.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetPlatformV1PlatformsPlatformIdGet200Response]
    def get_platform_v1_platforms_platform_id_get(platform_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_platform_v1_platforms_platform_id_get_with_http_info(platform_id, pinwheel_version, opts)
      data
    end

    # Get Platform
    # Get a payroll platform supported by Link.
    # @param platform_id [String] UUID of the platform.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlatformV1PlatformsPlatformIdGet200Response, Integer, Hash)>] GetPlatformV1PlatformsPlatformIdGet200Response data, response status code and response headers
    def get_platform_v1_platforms_platform_id_get_with_http_info(platform_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmployersAndPlatformsApi.get_platform_v1_platforms_platform_id_get ..."
      end
      # verify the required parameter 'platform_id' is set
      if @api_client.config.client_side_validation && platform_id.nil?
        fail ArgumentError, "Missing the required parameter 'platform_id' when calling EmployersAndPlatformsApi.get_platform_v1_platforms_platform_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EmployersAndPlatformsApi.get_platform_v1_platforms_platform_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/platforms/{platform_id}".sub("{" + "platform_id" + "}", CGI.escape(platform_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetPlatformV1PlatformsPlatformIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EmployersAndPlatformsApi.get_platform_v1_platforms_platform_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployersAndPlatformsApi#get_platform_v1_platforms_platform_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Employers
    # List all employers supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [GetV1EmployersGet200Response]
    def get_v1_employers_get(pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_employers_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Employers
    # List all employers supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [Array<(GetV1EmployersGet200Response, Integer, Hash)>] GetV1EmployersGet200Response data, response status code and response headers
    def get_v1_employers_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmployersAndPlatformsApi.get_v1_employers_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EmployersAndPlatformsApi.get_v1_employers_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EmployersAndPlatformsApi.get_v1_employers_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EmployersAndPlatformsApi.get_v1_employers_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/employers"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:last_updated] = opts[:last_updated] if !opts[:last_updated].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1EmployersGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EmployersAndPlatformsApi.get_v1_employers_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployersAndPlatformsApi#get_v1_employers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Search Employers and Platforms
    # Search all employers and platforms supported by Link.
    # @param q [String] Search query on the employer/platform name.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :supported_jobs Filter on supported jobs. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Array<String>] :response_types Filter on response type. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Boolean] :amount_supported Filter on amount_supported. If true, results that support setting a specific dollar amount for direct deposit switches will be returned. If false, results that support setting a specific dollar amount for direct deposit switches will be excluded.
    # @option opts [String] :platform_type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetV1SearchGet200Response]
    def get_v1_search_get(q, pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_search_get_with_http_info(q, pinwheel_version, opts)
      data
    end

    # Search Employers and Platforms
    # Search all employers and platforms supported by Link.
    # @param q [String] Search query on the employer/platform name.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :supported_jobs Filter on supported jobs. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Array<String>] :response_types Filter on response type. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Boolean] :amount_supported Filter on amount_supported. If true, results that support setting a specific dollar amount for direct deposit switches will be returned. If false, results that support setting a specific dollar amount for direct deposit switches will be excluded.
    # @option opts [String] :platform_type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetV1SearchGet200Response, Integer, Hash)>] GetV1SearchGet200Response data, response status code and response headers
    def get_v1_search_get_with_http_info(q, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmployersAndPlatformsApi.get_v1_search_get ..."
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling EmployersAndPlatformsApi.get_v1_search_get"
      end
      if @api_client.config.client_side_validation && q.to_s.length < 1
        fail ArgumentError, 'invalid value for "q" when calling EmployersAndPlatformsApi.get_v1_search_get, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EmployersAndPlatformsApi.get_v1_search_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      allowable_values = ["income", "tax_forms", "paystubs", "direct_deposit_payment", "employment", "shifts", "identity", "direct_deposit_allocations", "direct_deposit_switch"]
      if @api_client.config.client_side_validation && opts[:supported_jobs] && !opts[:supported_jobs].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"supported_jobs\", must include one of #{allowable_values}"
      end
      allowable_values = ["employer", "platform"]
      if @api_client.config.client_side_validation && opts[:response_types] && !opts[:response_types].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"response_types\", must include one of #{allowable_values}"
      end
      allowable_values = ["payroll", "time_and_attendance", "tax"]
      if @api_client.config.client_side_validation && opts[:platform_type] && !allowable_values.include?(opts[:platform_type])
        fail ArgumentError, "invalid value for \"platform_type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EmployersAndPlatformsApi.get_v1_search_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EmployersAndPlatformsApi.get_v1_search_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/search"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:q] = q
      query_params[:supported_jobs] = @api_client.build_collection_param(opts[:supported_jobs], :multi) if !opts[:supported_jobs].nil?
      query_params[:response_types] = @api_client.build_collection_param(opts[:response_types], :multi) if !opts[:response_types].nil?
      query_params[:amount_supported] = opts[:amount_supported] if !opts[:amount_supported].nil?
      query_params[:platform_type] = opts[:platform_type] if !opts[:platform_type].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1SearchGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EmployersAndPlatformsApi.get_v1_search_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployersAndPlatformsApi#get_v1_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Platforms
    # List all payroll platforms supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_esps ESP (employer-specific platform) is a term that is used to describe an Employer that uses a unique, dedicated payroll portal to serve their employees. Eg. - Walmart employees will authenticate via a Walmart payroll portal, whereas employees at Hilton will authenticate via ADP. ESPs can be thought of as both employers and platforms, so you can use this flag to include ESPs in the set of supported payroll platforms if desired. (default to false)
    # @option opts [String] :type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [ListPlatformsV1PlatformsGet200Response]
    def list_platforms_v1_platforms_get(pinwheel_version, opts = {})
      data, _status_code, _headers = list_platforms_v1_platforms_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Platforms
    # List all payroll platforms supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_esps ESP (employer-specific platform) is a term that is used to describe an Employer that uses a unique, dedicated payroll portal to serve their employees. Eg. - Walmart employees will authenticate via a Walmart payroll portal, whereas employees at Hilton will authenticate via ADP. ESPs can be thought of as both employers and platforms, so you can use this flag to include ESPs in the set of supported payroll platforms if desired. (default to false)
    # @option opts [String] :type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [Array<(ListPlatformsV1PlatformsGet200Response, Integer, Hash)>] ListPlatformsV1PlatformsGet200Response data, response status code and response headers
    def list_platforms_v1_platforms_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmployersAndPlatformsApi.list_platforms_v1_platforms_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EmployersAndPlatformsApi.list_platforms_v1_platforms_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      allowable_values = ["payroll", "time_and_attendance", "tax"]
      if @api_client.config.client_side_validation && opts[:type] && !allowable_values.include?(opts[:type])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EmployersAndPlatformsApi.list_platforms_v1_platforms_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EmployersAndPlatformsApi.list_platforms_v1_platforms_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/platforms"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include_esps] = opts[:include_esps] if !opts[:include_esps].nil?
      query_params[:type] = opts[:type] if !opts[:type].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:last_updated] = opts[:last_updated] if !opts[:last_updated].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListPlatformsV1PlatformsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EmployersAndPlatformsApi.list_platforms_v1_platforms_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployersAndPlatformsApi#list_platforms_v1_platforms_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
