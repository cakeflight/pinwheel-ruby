# #Pinwheel
#
# Pinwheel is the API for Payroll
#
# The version of the OpenAPI document: v2023-11-22
# Contact: support@getpinwheel.com
# Generated by: https://openapi-generator.tech
# Generator version: 7.7.0
#

require "cgi"

module Pinwheel
  class EndUsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get all end user accounts
    # Get all payroll accounts associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response]
    def get_end_user_accounts_v1_end_users_end_user_id_accounts_get(end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_accounts_v1_end_users_end_user_id_accounts_get_with_http_info(end_user_id, pinwheel_version, opts)
      data
    end

    # Get all end user accounts
    # Get all payroll accounts associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response, Integer, Hash)>] GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response data, response status code and response headers
    def get_end_user_accounts_v1_end_users_end_user_id_accounts_get_with_http_info(end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndUsersApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get ..."
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling EndUsersApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EndUsersApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EndUsersApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EndUsersApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/end_users/{end_user_id}/accounts".sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EndUsersApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndUsersApi#get_end_user_accounts_v1_end_users_end_user_id_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Document
    # Get a specific document for your end user ID.
    # @param document_id [String] Unique identifier of the document object.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response]
    def get_end_user_document_v1_end_users_end_user_id_documents_document_id_get(document_id, end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_document_v1_end_users_end_user_id_documents_document_id_get_with_http_info(document_id, end_user_id, pinwheel_version, opts)
      data
    end

    # Get Document
    # Get a specific document for your end user ID.
    # @param document_id [String] Unique identifier of the document object.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response, Integer, Hash)>] GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response data, response status code and response headers
    def get_end_user_document_v1_end_users_end_user_id_documents_document_id_get_with_http_info(document_id, end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndUsersApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get ..."
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling EndUsersApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get"
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling EndUsersApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EndUsersApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/end_users/{end_user_id}/documents/{document_id}".sub("{" + "document_id" + "}", CGI.escape(document_id.to_s)).sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EndUsersApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndUsersApi#get_end_user_document_v1_end_users_end_user_id_documents_document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Documents
    # Lists all documents associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of the document.
    # @return [GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response]
    def get_end_user_documents_v1_end_users_end_user_id_documents_get(end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_documents_v1_end_users_end_user_id_documents_get_with_http_info(end_user_id, pinwheel_version, opts)
      data
    end

    # List Documents
    # Lists all documents associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of the document.
    # @return [Array<(GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response, Integer, Hash)>] GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response data, response status code and response headers
    def get_end_user_documents_v1_end_users_end_user_id_documents_get_with_http_info(end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EndUsersApi.get_end_user_documents_v1_end_users_end_user_id_documents_get ..."
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling EndUsersApi.get_end_user_documents_v1_end_users_end_user_id_documents_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling EndUsersApi.get_end_user_documents_v1_end_users_end_user_id_documents_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      allowable_values = ["direct_deposit_form"]
      if @api_client.config.client_side_validation && opts[:type] && !allowable_values.include?(opts[:type])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/end_users/{end_user_id}/documents".sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:type] = opts[:type] if !opts[:type].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"EndUsersApi.get_end_user_documents_v1_end_users_end_user_id_documents_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndUsersApi#get_end_user_documents_v1_end_users_end_user_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
