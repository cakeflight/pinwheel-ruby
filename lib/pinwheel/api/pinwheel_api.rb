# #Pinwheel
#
# Pinwheel is the API for Payroll
#
# The version of the OpenAPI document: v2023-11-22
# Contact: support@getpinwheel.com
# Generated by: https://openapi-generator.tech
# Generator version: 7.7.0
#

require "cgi"

module Pinwheel
  class PinwheelApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Admin API Authentication
    # Authenticate against the Admin API.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param create_admin_token_request [CreateAdminTokenRequest]
    # @param [Hash] opts the optional parameters
    # @return [AuthV1AdminTokenPost200Response]
    def auth_v1_admin_token_post(pinwheel_version, create_admin_token_request, opts = {})
      data, _status_code, _headers = auth_v1_admin_token_post_with_http_info(pinwheel_version, create_admin_token_request, opts)
      data
    end

    # Admin API Authentication
    # Authenticate against the Admin API.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param create_admin_token_request [CreateAdminTokenRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthV1AdminTokenPost200Response, Integer, Hash)>] AuthV1AdminTokenPost200Response data, response status code and response headers
    def auth_v1_admin_token_post_with_http_info(pinwheel_version, create_admin_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.auth_v1_admin_token_post ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.auth_v1_admin_token_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'create_admin_token_request' is set
      if @api_client.config.client_side_validation && create_admin_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_admin_token_request' when calling PinwheelApi.auth_v1_admin_token_post"
      end
      # resource path
      local_var_path = "/admin/token"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_admin_token_request)

      # return_type
      return_type = opts[:debug_return_type] || "AuthV1AdminTokenPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"PinwheelApi.auth_v1_admin_token_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#auth_v1_admin_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create an API Key
    # Creates an API Key.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Admin API bearer token.
    # @option opts [CreateAPIKeyOptions] :create_api_key_options
    # @return [CreateKeyV1AdminApiKeysPost200Response]
    def create_key_v1_admin_api_keys_post(pinwheel_version, opts = {})
      data, _status_code, _headers = create_key_v1_admin_api_keys_post_with_http_info(pinwheel_version, opts)
      data
    end

    # Create an API Key
    # Creates an API Key.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Admin API bearer token.
    # @option opts [CreateAPIKeyOptions] :create_api_key_options
    # @return [Array<(CreateKeyV1AdminApiKeysPost200Response, Integer, Hash)>] CreateKeyV1AdminApiKeysPost200Response data, response status code and response headers
    def create_key_v1_admin_api_keys_post_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.create_key_v1_admin_api_keys_post ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.create_key_v1_admin_api_keys_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/admin/api_keys"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version
      header_params[:authorization] = opts[:authorization] if !opts[:authorization].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:create_api_key_options])

      # return_type
      return_type = opts[:debug_return_type] || "CreateKeyV1AdminApiKeysPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["bearerAuth"]

      new_options = opts.merge(
        operation: :"PinwheelApi.create_key_v1_admin_api_keys_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#create_key_v1_admin_api_keys_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Webhook
    # Delete a webhook.
    # @param webhook_id [String] UUID of the webhook.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_v1_webhooks_webhook_id_delete(webhook_id, pinwheel_version, opts = {})
      data, _status_code, _headers = delete_v1_webhooks_webhook_id_delete_with_http_info(webhook_id, pinwheel_version, opts)
      data
    end

    # Delete Webhook
    # Delete a webhook.
    # @param webhook_id [String] UUID of the webhook.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_v1_webhooks_webhook_id_delete_with_http_info(webhook_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.delete_v1_webhooks_webhook_id_delete ..."
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling PinwheelApi.delete_v1_webhooks_webhook_id_delete"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.delete_v1_webhooks_webhook_id_delete"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/webhooks/{webhook_id}".sub("{" + "webhook_id" + "}", CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Object"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.delete_v1_webhooks_webhook_id_delete",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#delete_v1_webhooks_webhook_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Disable monitoring for account
    # Disable monitoring for an account so that refresh jobs will no longer be scheduled to retrieve payroll data.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_monitoring_v1_accounts_account_id_disable_monitoring_post(account_id, pinwheel_version, opts = {})
      disable_monitoring_v1_accounts_account_id_disable_monitoring_post_with_http_info(account_id, pinwheel_version, opts)
      nil
    end

    # Disable monitoring for account
    # Disable monitoring for an account so that refresh jobs will no longer be scheduled to retrieve payroll data.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_monitoring_v1_accounts_account_id_disable_monitoring_post_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.disable_monitoring_v1_accounts_account_id_disable_monitoring_post ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.disable_monitoring_v1_accounts_account_id_disable_monitoring_post"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.disable_monitoring_v1_accounts_account_id_disable_monitoring_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/disable_monitoring".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.disable_monitoring_v1_accounts_account_id_disable_monitoring_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#disable_monitoring_v1_accounts_account_id_disable_monitoring_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Disconnect an account
    # Disconnect an account. This is permanent and irreversible. Once complete, an account will no longer support Earnings Streams or Recurring Access, e.g., On Demand Updates will no longer work and Monitoring will no longer be performed. However, old data will remain accessible. As mentioned above, this excludes derived data products e.g. Earnings Stream.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disconnect_v1_accounts_account_id_disconnect_post(account_id, pinwheel_version, opts = {})
      disconnect_v1_accounts_account_id_disconnect_post_with_http_info(account_id, pinwheel_version, opts)
      nil
    end

    # Disconnect an account
    # Disconnect an account. This is permanent and irreversible. Once complete, an account will no longer support Earnings Streams or Recurring Access, e.g., On Demand Updates will no longer work and Monitoring will no longer be performed. However, old data will remain accessible. As mentioned above, this excludes derived data products e.g. Earnings Stream.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disconnect_v1_accounts_account_id_disconnect_post_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.disconnect_v1_accounts_account_id_disconnect_post ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.disconnect_v1_accounts_account_id_disconnect_post"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.disconnect_v1_accounts_account_id_disconnect_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/disconnect".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.disconnect_v1_accounts_account_id_disconnect_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#disconnect_v1_accounts_account_id_disconnect_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Account
    # Get a single payroll account.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetAccountV1AccountsAccountIdGet200Response]
    def get_account_v1_accounts_account_id_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_account_v1_accounts_account_id_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # Get Account
    # Get a single payroll account.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountV1AccountsAccountIdGet200Response, Integer, Hash)>] GetAccountV1AccountsAccountIdGet200Response data, response status code and response headers
    def get_account_v1_accounts_account_id_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_account_v1_accounts_account_id_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.get_account_v1_accounts_account_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_account_v1_accounts_account_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetAccountV1AccountsAccountIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_account_v1_accounts_account_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_account_v1_accounts_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Direct Deposit Allocations
    # The Direct Deposit Allocations endpoint returns the current direct deposit allocations configured for the specified account.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetDirectDepositAllocationsV1AccountsAccountIdDirectDepositAllocationsGet200Response]
    def get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # Get Direct Deposit Allocations
    # The Direct Deposit Allocations endpoint returns the current direct deposit allocations configured for the specified account.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDirectDepositAllocationsV1AccountsAccountIdDirectDepositAllocationsGet200Response, Integer, Hash)>] GetDirectDepositAllocationsV1AccountsAccountIdDirectDepositAllocationsGet200Response data, response status code and response headers
    def get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/direct_deposit_allocations".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetDirectDepositAllocationsV1AccountsAccountIdDirectDepositAllocationsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_direct_deposit_allocations_v1_accounts_account_id_direct_deposit_allocations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Earnings Stream Payouts
    # Get an Earnings Stream of payout objects representing discrete cash flow events. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetEarningsStreamPayoutsV1EndUsersEndUserIdEarningsStreamPayoutsGet200Response]
    def get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get(end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get_with_http_info(end_user_id, pinwheel_version, opts)
      data
    end

    # Get Earnings Stream Payouts
    # Get an Earnings Stream of payout objects representing discrete cash flow events. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetEarningsStreamPayoutsV1EndUsersEndUserIdEarningsStreamPayoutsGet200Response, Integer, Hash)>] GetEarningsStreamPayoutsV1EndUsersEndUserIdEarningsStreamPayoutsGet200Response data, response status code and response headers
    def get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get_with_http_info(end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get ..."
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling PinwheelApi.get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/end_users/{end_user_id}/earnings_stream/payouts".sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEarningsStreamPayoutsV1EndUsersEndUserIdEarningsStreamPayoutsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_earnings_stream_payouts_v1_end_users_end_user_id_earnings_stream_payouts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Employer
    # Get an Employer given the employer ID.
    # @param employer_id [String] UUID of the employer.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetEmployerV1EmployersEmployerIdGet200Response]
    def get_employer_v1_employers_employer_id_get(employer_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_employer_v1_employers_employer_id_get_with_http_info(employer_id, pinwheel_version, opts)
      data
    end

    # Get Employer
    # Get an Employer given the employer ID.
    # @param employer_id [String] UUID of the employer.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmployerV1EmployersEmployerIdGet200Response, Integer, Hash)>] GetEmployerV1EmployersEmployerIdGet200Response data, response status code and response headers
    def get_employer_v1_employers_employer_id_get_with_http_info(employer_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_employer_v1_employers_employer_id_get ..."
      end
      # verify the required parameter 'employer_id' is set
      if @api_client.config.client_side_validation && employer_id.nil?
        fail ArgumentError, "Missing the required parameter 'employer_id' when calling PinwheelApi.get_employer_v1_employers_employer_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_employer_v1_employers_employer_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/employers/{employer_id}".sub("{" + "employer_id" + "}", CGI.escape(employer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEmployerV1EmployersEmployerIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_employer_v1_employers_employer_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_employer_v1_employers_employer_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Employment
    # Get the current employment information of the account owner.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetEmploymentV1AccountsAccountIdEmploymentGet200Response]
    def get_employment_v1_accounts_account_id_employment_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_employment_v1_accounts_account_id_employment_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # Get Employment
    # Get the current employment information of the account owner.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEmploymentV1AccountsAccountIdEmploymentGet200Response, Integer, Hash)>] GetEmploymentV1AccountsAccountIdEmploymentGet200Response data, response status code and response headers
    def get_employment_v1_accounts_account_id_employment_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_employment_v1_accounts_account_id_employment_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.get_employment_v1_accounts_account_id_employment_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_employment_v1_accounts_account_id_employment_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/employment".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEmploymentV1AccountsAccountIdEmploymentGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_employment_v1_accounts_account_id_employment_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_employment_v1_accounts_account_id_employment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get all end user accounts
    # Get all payroll accounts associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response]
    def get_end_user_accounts_v1_end_users_end_user_id_accounts_get(end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_accounts_v1_end_users_end_user_id_accounts_get_with_http_info(end_user_id, pinwheel_version, opts)
      data
    end

    # Get all end user accounts
    # Get all payroll accounts associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response, Integer, Hash)>] GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response data, response status code and response headers
    def get_end_user_accounts_v1_end_users_end_user_id_accounts_get_with_http_info(end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get ..."
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling PinwheelApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/end_users/{end_user_id}/accounts".sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_end_user_accounts_v1_end_users_end_user_id_accounts_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_end_user_accounts_v1_end_users_end_user_id_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Document
    # Get a specific document for your end user ID.
    # @param document_id [String] Unique identifier of the document object.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response]
    def get_end_user_document_v1_end_users_end_user_id_documents_document_id_get(document_id, end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_document_v1_end_users_end_user_id_documents_document_id_get_with_http_info(document_id, end_user_id, pinwheel_version, opts)
      data
    end

    # Get Document
    # Get a specific document for your end user ID.
    # @param document_id [String] Unique identifier of the document object.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response, Integer, Hash)>] GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response data, response status code and response headers
    def get_end_user_document_v1_end_users_end_user_id_documents_document_id_get_with_http_info(document_id, end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get ..."
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling PinwheelApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get"
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling PinwheelApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/end_users/{end_user_id}/documents/{document_id}".sub("{" + "document_id" + "}", CGI.escape(document_id.to_s)).sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserDocumentV1EndUsersEndUserIdDocumentsDocumentIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_end_user_document_v1_end_users_end_user_id_documents_document_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_end_user_document_v1_end_users_end_user_id_documents_document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Documents
    # Lists all documents associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of the document.
    # @return [GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response]
    def get_end_user_documents_v1_end_users_end_user_id_documents_get(end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_documents_v1_end_users_end_user_id_documents_get_with_http_info(end_user_id, pinwheel_version, opts)
      data
    end

    # List Documents
    # Lists all documents associated with your end user ID. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of the document.
    # @return [Array<(GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response, Integer, Hash)>] GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response data, response status code and response headers
    def get_end_user_documents_v1_end_users_end_user_id_documents_get_with_http_info(end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_end_user_documents_v1_end_users_end_user_id_documents_get ..."
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling PinwheelApi.get_end_user_documents_v1_end_users_end_user_id_documents_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_end_user_documents_v1_end_users_end_user_id_documents_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      allowable_values = ["direct_deposit_form"]
      if @api_client.config.client_side_validation && opts[:type] && !allowable_values.include?(opts[:type])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/end_users/{end_user_id}/documents".sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:type] = opts[:type] if !opts[:type].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserDocumentsV1EndUsersEndUserIdDocumentsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_end_user_documents_v1_end_users_end_user_id_documents_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_end_user_documents_v1_end_users_end_user_id_documents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Verification of Employment Report
    # Get a Verification of Employment (VOE) report associated with your end user ID.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetEndUserVerificationReportsVoeV1EndUsersEndUserIdVerificationReportsVoeGet200Response]
    def get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get(end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get_with_http_info(end_user_id, pinwheel_version, opts)
      data
    end

    # Get Verification of Employment Report
    # Get a Verification of Employment (VOE) report associated with your end user ID.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEndUserVerificationReportsVoeV1EndUsersEndUserIdVerificationReportsVoeGet200Response, Integer, Hash)>] GetEndUserVerificationReportsVoeV1EndUsersEndUserIdVerificationReportsVoeGet200Response data, response status code and response headers
    def get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get_with_http_info(end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get ..."
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling PinwheelApi.get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/end_users/{end_user_id}/verification_reports/voe".sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserVerificationReportsVoeV1EndUsersEndUserIdVerificationReportsVoeGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_end_user_verification_reports_voe_v1_end_users_end_user_id_verification_reports_voe_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Verification of Income and Employment Report
    # Get a Verification of Income and Employment (VOIE) report associated with your end user ID.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetEndUserVerificationReportsVoieV1EndUsersEndUserIdVerificationReportsVoieGet200Response]
    def get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get(end_user_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get_with_http_info(end_user_id, pinwheel_version, opts)
      data
    end

    # Get Verification of Income and Employment Report
    # Get a Verification of Income and Employment (VOIE) report associated with your end user ID.
    # @param end_user_id [String] User ID provided by you, to associate Pinwheel users with your user model.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEndUserVerificationReportsVoieV1EndUsersEndUserIdVerificationReportsVoieGet200Response, Integer, Hash)>] GetEndUserVerificationReportsVoieV1EndUsersEndUserIdVerificationReportsVoieGet200Response data, response status code and response headers
    def get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get_with_http_info(end_user_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get ..."
      end
      # verify the required parameter 'end_user_id' is set
      if @api_client.config.client_side_validation && end_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'end_user_id' when calling PinwheelApi.get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/end_users/{end_user_id}/verification_reports/voie".sub("{" + "end_user_id" + "}", CGI.escape(end_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserVerificationReportsVoieV1EndUsersEndUserIdVerificationReportsVoieGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_end_user_verification_reports_voie_v1_end_users_end_user_id_verification_reports_voie_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Identity
    # Get the current identity information of the account owner.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetIdentityV1AccountsAccountIdIdentityGet200Response]
    def get_identity_v1_accounts_account_id_identity_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_identity_v1_accounts_account_id_identity_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # Get Identity
    # Get the current identity information of the account owner.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIdentityV1AccountsAccountIdIdentityGet200Response, Integer, Hash)>] GetIdentityV1AccountsAccountIdIdentityGet200Response data, response status code and response headers
    def get_identity_v1_accounts_account_id_identity_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_identity_v1_accounts_account_id_identity_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.get_identity_v1_accounts_account_id_identity_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_identity_v1_accounts_account_id_identity_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/identity".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetIdentityV1AccountsAccountIdIdentityGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_identity_v1_accounts_account_id_identity_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_identity_v1_accounts_account_id_identity_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Income
    # Get the current income information of the account owner.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetIncomeV1AccountsAccountIdIncomeGet200Response]
    def get_income_v1_accounts_account_id_income_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_income_v1_accounts_account_id_income_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # Get Income
    # Get the current income information of the account owner.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIncomeV1AccountsAccountIdIncomeGet200Response, Integer, Hash)>] GetIncomeV1AccountsAccountIdIncomeGet200Response data, response status code and response headers
    def get_income_v1_accounts_account_id_income_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_income_v1_accounts_account_id_income_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.get_income_v1_accounts_account_id_income_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_income_v1_accounts_account_id_income_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/income".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetIncomeV1AccountsAccountIdIncomeGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_income_v1_accounts_account_id_income_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_income_v1_accounts_account_id_income_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Completed Jobs
    # List all completed jobs which were initiated by Link (i.e., excluding refresh jobs for monitoring). This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :link_token_id UUID of the link token triggering the job.
    # @option opts [String] :account_id UUID of the payroll account.
    # @option opts [Array<String>] :job_types List of job types. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [String] :outcome The outcome of the job.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Time] :from_timestamp Return results after this ISO 8601 timestamp.
    # @option opts [Time] :to_timestamp Return results to this ISO 8601 timestamp.
    # @return [GetJobsV1JobsGet200Response]
    def get_jobs_v1_jobs_get(pinwheel_version, opts = {})
      data, _status_code, _headers = get_jobs_v1_jobs_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Completed Jobs
    # List all completed jobs which were initiated by Link (i.e., excluding refresh jobs for monitoring). This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :link_token_id UUID of the link token triggering the job.
    # @option opts [String] :account_id UUID of the payroll account.
    # @option opts [Array<String>] :job_types List of job types. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [String] :outcome The outcome of the job.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Time] :from_timestamp Return results after this ISO 8601 timestamp.
    # @option opts [Time] :to_timestamp Return results to this ISO 8601 timestamp.
    # @return [Array<(GetJobsV1JobsGet200Response, Integer, Hash)>] GetJobsV1JobsGet200Response data, response status code and response headers
    def get_jobs_v1_jobs_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_jobs_v1_jobs_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_jobs_v1_jobs_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      allowable_values = ["tax_forms", "identity", "direct_deposit_allocations", "direct_deposit_switch", "employment", "direct_deposit_payment", "income", "paystubs", "shifts"]
      if @api_client.config.client_side_validation && opts[:job_types] && !opts[:job_types].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"job_types\", must include one of #{allowable_values}"
      end
      allowable_values = ["success", "pending", "error"]
      if @api_client.config.client_side_validation && opts[:outcome] && !allowable_values.include?(opts[:outcome])
        fail ArgumentError, "invalid value for \"outcome\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_jobs_v1_jobs_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_jobs_v1_jobs_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/jobs"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:link_token_id] = opts[:link_token_id] if !opts[:link_token_id].nil?
      query_params[:account_id] = opts[:account_id] if !opts[:account_id].nil?
      query_params[:job_types] = @api_client.build_collection_param(opts[:job_types], :multi) if !opts[:job_types].nil?
      query_params[:outcome] = opts[:outcome] if !opts[:outcome].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:from_timestamp] = opts[:from_timestamp] if !opts[:from_timestamp].nil?
      query_params[:to_timestamp] = opts[:to_timestamp] if !opts[:to_timestamp].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetJobsV1JobsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_jobs_v1_jobs_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_jobs_v1_jobs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Paystub
    # Get a single paystub.
    # @param paystub_id [String] The id of the paystub.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetPaystubV1AccountsAccountIdPaystubsPaystubIdGet200Response]
    def get_paystub_v1_accounts_account_id_paystubs_paystub_id_get(paystub_id, account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_paystub_v1_accounts_account_id_paystubs_paystub_id_get_with_http_info(paystub_id, account_id, pinwheel_version, opts)
      data
    end

    # Get Paystub
    # Get a single paystub.
    # @param paystub_id [String] The id of the paystub.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPaystubV1AccountsAccountIdPaystubsPaystubIdGet200Response, Integer, Hash)>] GetPaystubV1AccountsAccountIdPaystubsPaystubIdGet200Response data, response status code and response headers
    def get_paystub_v1_accounts_account_id_paystubs_paystub_id_get_with_http_info(paystub_id, account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_paystub_v1_accounts_account_id_paystubs_paystub_id_get ..."
      end
      # verify the required parameter 'paystub_id' is set
      if @api_client.config.client_side_validation && paystub_id.nil?
        fail ArgumentError, "Missing the required parameter 'paystub_id' when calling PinwheelApi.get_paystub_v1_accounts_account_id_paystubs_paystub_id_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.get_paystub_v1_accounts_account_id_paystubs_paystub_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_paystub_v1_accounts_account_id_paystubs_paystub_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/paystubs/{paystub_id}".sub("{" + "paystub_id" + "}", CGI.escape(paystub_id.to_s)).sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetPaystubV1AccountsAccountIdPaystubsPaystubIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_paystub_v1_accounts_account_id_paystubs_paystub_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_paystub_v1_accounts_account_id_paystubs_paystub_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Platform
    # Get a payroll platform supported by Link.
    # @param platform_id [String] UUID of the platform.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [GetPlatformV1PlatformsPlatformIdGet200Response]
    def get_platform_v1_platforms_platform_id_get(platform_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_platform_v1_platforms_platform_id_get_with_http_info(platform_id, pinwheel_version, opts)
      data
    end

    # Get Platform
    # Get a payroll platform supported by Link.
    # @param platform_id [String] UUID of the platform.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlatformV1PlatformsPlatformIdGet200Response, Integer, Hash)>] GetPlatformV1PlatformsPlatformIdGet200Response data, response status code and response headers
    def get_platform_v1_platforms_platform_id_get_with_http_info(platform_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_platform_v1_platforms_platform_id_get ..."
      end
      # verify the required parameter 'platform_id' is set
      if @api_client.config.client_side_validation && platform_id.nil?
        fail ArgumentError, "Missing the required parameter 'platform_id' when calling PinwheelApi.get_platform_v1_platforms_platform_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_platform_v1_platforms_platform_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/platforms/{platform_id}".sub("{" + "platform_id" + "}", CGI.escape(platform_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetPlatformV1PlatformsPlatformIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_platform_v1_platforms_platform_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_platform_v1_platforms_platform_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Tax Form
    # Gets a specific tax form with document data.
    # @param tax_form_id [String] Unique identifier of the tax form object.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :with_parsed_data If set to true, return the parsed data of the tax form document. Note the billing implications of the Tax Forms endpoint.
    # @return [GetTaxFormV1AccountsAccountIdTaxFormsTaxFormIdGet200Response]
    def get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get(tax_form_id, account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get_with_http_info(tax_form_id, account_id, pinwheel_version, opts)
      data
    end

    # Get Tax Form
    # Gets a specific tax form with document data.
    # @param tax_form_id [String] Unique identifier of the tax form object.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :with_parsed_data If set to true, return the parsed data of the tax form document. Note the billing implications of the Tax Forms endpoint.
    # @return [Array<(GetTaxFormV1AccountsAccountIdTaxFormsTaxFormIdGet200Response, Integer, Hash)>] GetTaxFormV1AccountsAccountIdTaxFormsTaxFormIdGet200Response data, response status code and response headers
    def get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get_with_http_info(tax_form_id, account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get ..."
      end
      # verify the required parameter 'tax_form_id' is set
      if @api_client.config.client_side_validation && tax_form_id.nil?
        fail ArgumentError, "Missing the required parameter 'tax_form_id' when calling PinwheelApi.get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts/{account_id}/tax_forms/{tax_form_id}".sub("{" + "tax_form_id" + "}", CGI.escape(tax_form_id.to_s)).sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:with_parsed_data] = opts[:with_parsed_data] if !opts[:with_parsed_data].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetTaxFormV1AccountsAccountIdTaxFormsTaxFormIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_tax_form_v1_accounts_account_id_tax_forms_tax_form_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Employees
    # List all employee census data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetV1CompanyConnectionsCompanyConnectionIdCensusGet200Response]
    def get_v1_company_connections_company_connection_id_census_get(company_connection_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_company_connections_company_connection_id_census_get_with_http_info(company_connection_id, pinwheel_version, opts)
      data
    end

    # List Employees
    # List all employee census data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetV1CompanyConnectionsCompanyConnectionIdCensusGet200Response, Integer, Hash)>] GetV1CompanyConnectionsCompanyConnectionIdCensusGet200Response data, response status code and response headers
    def get_v1_company_connections_company_connection_id_census_get_with_http_info(company_connection_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_company_connections_company_connection_id_census_get ..."
      end
      # verify the required parameter 'company_connection_id' is set
      if @api_client.config.client_side_validation && company_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_connection_id' when calling PinwheelApi.get_v1_company_connections_company_connection_id_census_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_company_connections_company_connection_id_census_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_census_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_census_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/company_connections/{company_connection_id}/census".sub("{" + "company_connection_id" + "}", CGI.escape(company_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1CompanyConnectionsCompanyConnectionIdCensusGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_company_connections_company_connection_id_census_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_company_connections_company_connection_id_census_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Employments Data
    # List all employments data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetV1CompanyConnectionsCompanyConnectionIdEmploymentsGet200Response]
    def get_v1_company_connections_company_connection_id_employments_get(company_connection_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_company_connections_company_connection_id_employments_get_with_http_info(company_connection_id, pinwheel_version, opts)
      data
    end

    # List Employments Data
    # List all employments data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetV1CompanyConnectionsCompanyConnectionIdEmploymentsGet200Response, Integer, Hash)>] GetV1CompanyConnectionsCompanyConnectionIdEmploymentsGet200Response data, response status code and response headers
    def get_v1_company_connections_company_connection_id_employments_get_with_http_info(company_connection_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_company_connections_company_connection_id_employments_get ..."
      end
      # verify the required parameter 'company_connection_id' is set
      if @api_client.config.client_side_validation && company_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_connection_id' when calling PinwheelApi.get_v1_company_connections_company_connection_id_employments_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_company_connections_company_connection_id_employments_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_employments_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_employments_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/company_connections/{company_connection_id}/employments".sub("{" + "company_connection_id" + "}", CGI.escape(company_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1CompanyConnectionsCompanyConnectionIdEmploymentsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_company_connections_company_connection_id_employments_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_company_connections_company_connection_id_employments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Company Connection
    # Get Company Connection.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [PostV1CompanyConnectionsPost200Response]
    def get_v1_company_connections_company_connection_id_get(company_connection_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_company_connections_company_connection_id_get_with_http_info(company_connection_id, pinwheel_version, opts)
      data
    end

    # Get Company Connection
    # Get Company Connection.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostV1CompanyConnectionsPost200Response, Integer, Hash)>] PostV1CompanyConnectionsPost200Response data, response status code and response headers
    def get_v1_company_connections_company_connection_id_get_with_http_info(company_connection_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_company_connections_company_connection_id_get ..."
      end
      # verify the required parameter 'company_connection_id' is set
      if @api_client.config.client_side_validation && company_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_connection_id' when calling PinwheelApi.get_v1_company_connections_company_connection_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_company_connections_company_connection_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/company_connections/{company_connection_id}".sub("{" + "company_connection_id" + "}", CGI.escape(company_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "PostV1CompanyConnectionsPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_company_connections_company_connection_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_company_connections_company_connection_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Employee Incomes
    # List all employee income data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetV1CompanyConnectionsCompanyConnectionIdIncomesGet200Response]
    def get_v1_company_connections_company_connection_id_incomes_get(company_connection_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_company_connections_company_connection_id_incomes_get_with_http_info(company_connection_id, pinwheel_version, opts)
      data
    end

    # List Employee Incomes
    # List all employee income data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetV1CompanyConnectionsCompanyConnectionIdIncomesGet200Response, Integer, Hash)>] GetV1CompanyConnectionsCompanyConnectionIdIncomesGet200Response data, response status code and response headers
    def get_v1_company_connections_company_connection_id_incomes_get_with_http_info(company_connection_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_company_connections_company_connection_id_incomes_get ..."
      end
      # verify the required parameter 'company_connection_id' is set
      if @api_client.config.client_side_validation && company_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_connection_id' when calling PinwheelApi.get_v1_company_connections_company_connection_id_incomes_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_company_connections_company_connection_id_incomes_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_incomes_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_incomes_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/company_connections/{company_connection_id}/incomes".sub("{" + "company_connection_id" + "}", CGI.escape(company_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1CompanyConnectionsCompanyConnectionIdIncomesGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_company_connections_company_connection_id_incomes_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_company_connections_company_connection_id_incomes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Employee Paystubs
    # List employee paystubs data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param employee_external_id [String] Employee ID as reported by their employer.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from_pay_date Filter for paystubs with pay dates after this date.
    # @option opts [Date] :to_pay_date Filter for paystubs with pay dates before this date.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetV1CompanyConnectionsCompanyConnectionIdPaystubsEmployeeExternalIdGet200Response]
    def get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get(company_connection_id, employee_external_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get_with_http_info(company_connection_id, employee_external_id, pinwheel_version, opts)
      data
    end

    # List Employee Paystubs
    # List employee paystubs data reported by the payroll platform. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param company_connection_id [String] UUID of the Company Connection.
    # @param employee_external_id [String] Employee ID as reported by their employer.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from_pay_date Filter for paystubs with pay dates after this date.
    # @option opts [Date] :to_pay_date Filter for paystubs with pay dates before this date.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetV1CompanyConnectionsCompanyConnectionIdPaystubsEmployeeExternalIdGet200Response, Integer, Hash)>] GetV1CompanyConnectionsCompanyConnectionIdPaystubsEmployeeExternalIdGet200Response data, response status code and response headers
    def get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get_with_http_info(company_connection_id, employee_external_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get ..."
      end
      # verify the required parameter 'company_connection_id' is set
      if @api_client.config.client_side_validation && company_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_connection_id' when calling PinwheelApi.get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get"
      end
      # verify the required parameter 'employee_external_id' is set
      if @api_client.config.client_side_validation && employee_external_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_external_id' when calling PinwheelApi.get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/company_connections/{company_connection_id}/paystubs/{employee_external_id}".sub("{" + "company_connection_id" + "}", CGI.escape(company_connection_id.to_s)).sub("{" + "employee_external_id" + "}", CGI.escape(employee_external_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:from_pay_date] = opts[:from_pay_date] if !opts[:from_pay_date].nil?
      query_params[:to_pay_date] = opts[:to_pay_date] if !opts[:to_pay_date].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1CompanyConnectionsCompanyConnectionIdPaystubsEmployeeExternalIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_company_connections_company_connection_id_paystubs_employee_external_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Employers
    # List all employers supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [GetV1EmployersGet200Response]
    def get_v1_employers_get(pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_employers_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Employers
    # List all employers supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [Array<(GetV1EmployersGet200Response, Integer, Hash)>] GetV1EmployersGet200Response data, response status code and response headers
    def get_v1_employers_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_employers_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_employers_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_employers_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_employers_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/employers"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:last_updated] = opts[:last_updated] if !opts[:last_updated].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1EmployersGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_employers_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_employers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Search Employers and Platforms
    # Search all employers and platforms supported by Link.
    # @param q [String] Search query on the employer/platform name.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :supported_jobs Filter on supported jobs. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Array<String>] :response_types Filter on response type. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Boolean] :amount_supported Filter on amount_supported. If true, results that support setting a specific dollar amount for direct deposit switches will be returned. If false, results that support setting a specific dollar amount for direct deposit switches will be excluded.
    # @option opts [String] :platform_type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetV1SearchGet200Response]
    def get_v1_search_get(q, pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_search_get_with_http_info(q, pinwheel_version, opts)
      data
    end

    # Search Employers and Platforms
    # Search all employers and platforms supported by Link.
    # @param q [String] Search query on the employer/platform name.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :supported_jobs Filter on supported jobs. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Array<String>] :response_types Filter on response type. Multiple keys are allowed. May be expanded to include new enum values (see our Change Management policy).
    # @option opts [Boolean] :amount_supported Filter on amount_supported. If true, results that support setting a specific dollar amount for direct deposit switches will be returned. If false, results that support setting a specific dollar amount for direct deposit switches will be excluded.
    # @option opts [String] :platform_type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetV1SearchGet200Response, Integer, Hash)>] GetV1SearchGet200Response data, response status code and response headers
    def get_v1_search_get_with_http_info(q, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_search_get ..."
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling PinwheelApi.get_v1_search_get"
      end
      if @api_client.config.client_side_validation && q.to_s.length < 1
        fail ArgumentError, 'invalid value for "q" when calling PinwheelApi.get_v1_search_get, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_search_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      allowable_values = ["tax_forms", "identity", "direct_deposit_allocations", "direct_deposit_switch", "employment", "direct_deposit_payment", "income", "paystubs", "shifts"]
      if @api_client.config.client_side_validation && opts[:supported_jobs] && !opts[:supported_jobs].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"supported_jobs\", must include one of #{allowable_values}"
      end
      allowable_values = ["employer", "platform"]
      if @api_client.config.client_side_validation && opts[:response_types] && !opts[:response_types].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"response_types\", must include one of #{allowable_values}"
      end
      allowable_values = ["payroll", "time_and_attendance", "tax"]
      if @api_client.config.client_side_validation && opts[:platform_type] && !allowable_values.include?(opts[:platform_type])
        fail ArgumentError, "invalid value for \"platform_type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_search_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_search_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/search"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:q] = q
      query_params[:supported_jobs] = @api_client.build_collection_param(opts[:supported_jobs], :multi) if !opts[:supported_jobs].nil?
      query_params[:response_types] = @api_client.build_collection_param(opts[:response_types], :multi) if !opts[:response_types].nil?
      query_params[:amount_supported] = opts[:amount_supported] if !opts[:amount_supported].nil?
      query_params[:platform_type] = opts[:platform_type] if !opts[:platform_type].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1SearchGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_search_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Webhooks
    # List all webhooks. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [GetV1WebhooksGet200Response]
    def get_v1_webhooks_get(pinwheel_version, opts = {})
      data, _status_code, _headers = get_v1_webhooks_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Webhooks
    # List all webhooks. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(GetV1WebhooksGet200Response, Integer, Hash)>] GetV1WebhooksGet200Response data, response status code and response headers
    def get_v1_webhooks_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_v1_webhooks_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_v1_webhooks_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_webhooks_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.get_v1_webhooks_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/webhooks"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetV1WebhooksGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_v1_webhooks_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_v1_webhooks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Webhook
    # Get webhook by id.
    # @param webhook_id [String] UUID of the webhook.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [PostV1WebhooksPost200Response]
    def get_webhook_by_id_v1_webhooks_webhook_id_get(webhook_id, pinwheel_version, opts = {})
      data, _status_code, _headers = get_webhook_by_id_v1_webhooks_webhook_id_get_with_http_info(webhook_id, pinwheel_version, opts)
      data
    end

    # Get Webhook
    # Get webhook by id.
    # @param webhook_id [String] UUID of the webhook.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostV1WebhooksPost200Response, Integer, Hash)>] PostV1WebhooksPost200Response data, response status code and response headers
    def get_webhook_by_id_v1_webhooks_webhook_id_get_with_http_info(webhook_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.get_webhook_by_id_v1_webhooks_webhook_id_get ..."
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling PinwheelApi.get_webhook_by_id_v1_webhooks_webhook_id_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.get_webhook_by_id_v1_webhooks_webhook_id_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/webhooks/{webhook_id}".sub("{" + "webhook_id" + "}", CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "PostV1WebhooksPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.get_webhook_by_id_v1_webhooks_webhook_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#get_webhook_by_id_v1_webhooks_webhook_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Accounts
    # List all payroll accounts. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Boolean] :connected If included, filter on connected accounts. If true, return only accounts that are connected. If false, return only accounts that are disconnected. Connected accounts are accounts for which you can retrieve new data manually using On Demand Updates or automatically via Monitoring.
    # @option opts [String] :monitoring_status Monitoring status describes the the automated ability of Pinwheel to retrieve new account information.
    # @return [GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response]
    def list_accounts_v1_accounts_get(pinwheel_version, opts = {})
      data, _status_code, _headers = list_accounts_v1_accounts_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Accounts
    # List all payroll accounts. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Boolean] :connected If included, filter on connected accounts. If true, return only accounts that are connected. If false, return only accounts that are disconnected. Connected accounts are accounts for which you can retrieve new data manually using On Demand Updates or automatically via Monitoring.
    # @option opts [String] :monitoring_status Monitoring status describes the the automated ability of Pinwheel to retrieve new account information.
    # @return [Array<(GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response, Integer, Hash)>] GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response data, response status code and response headers
    def list_accounts_v1_accounts_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.list_accounts_v1_accounts_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.list_accounts_v1_accounts_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_accounts_v1_accounts_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_accounts_v1_accounts_get, must be greater than or equal to 1.'
      end

      allowable_values = ["active", "degraded", "user_action_required", "customer_disabled", "unavailable"]
      if @api_client.config.client_side_validation && opts[:monitoring_status] && !allowable_values.include?(opts[:monitoring_status])
        fail ArgumentError, "invalid value for \"monitoring_status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/accounts"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:connected] = opts[:connected] if !opts[:connected].nil?
      query_params[:monitoring_status] = opts[:monitoring_status] if !opts[:monitoring_status].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetEndUserAccountsV1EndUsersEndUserIdAccountsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.list_accounts_v1_accounts_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#list_accounts_v1_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List API Keys
    # List all keys for this workspace.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [String] :authorization Admin API bearer token.
    # @return [ListKeysV1AdminApiKeysGet200Response]
    def list_keys_v1_admin_api_keys_get(pinwheel_version, opts = {})
      data, _status_code, _headers = list_keys_v1_admin_api_keys_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List API Keys
    # List all keys for this workspace.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [String] :authorization Admin API bearer token.
    # @return [Array<(ListKeysV1AdminApiKeysGet200Response, Integer, Hash)>] ListKeysV1AdminApiKeysGet200Response data, response status code and response headers
    def list_keys_v1_admin_api_keys_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.list_keys_v1_admin_api_keys_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.list_keys_v1_admin_api_keys_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_keys_v1_admin_api_keys_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_keys_v1_admin_api_keys_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/admin/api_keys"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version
      header_params[:authorization] = opts[:authorization] if !opts[:authorization].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListKeysV1AdminApiKeysGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["bearerAuth"]

      new_options = opts.merge(
        operation: :"PinwheelApi.list_keys_v1_admin_api_keys_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#list_keys_v1_admin_api_keys_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Paystubs
    # The paystubs endpoint allows you to query for payouts to an end user. Each paystub contains broken out and aggregated earnings information, as well as relevant dates. Paystubs are returned in reverse chronological order by `pay_date`. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from_pay_date Filter for paystubs with pay dates after this date.
    # @option opts [Date] :to_pay_date Filter for paystubs with pay dates before this date.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return.
    # @return [ListPaystubsV1AccountsAccountIdPaystubsGet200Response]
    def list_paystubs_v1_accounts_account_id_paystubs_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = list_paystubs_v1_accounts_account_id_paystubs_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # List Paystubs
    # The paystubs endpoint allows you to query for payouts to an end user. Each paystub contains broken out and aggregated earnings information, as well as relevant dates. Paystubs are returned in reverse chronological order by &#x60;pay_date&#x60;. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from_pay_date Filter for paystubs with pay dates after this date.
    # @option opts [Date] :to_pay_date Filter for paystubs with pay dates before this date.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return.
    # @return [Array<(ListPaystubsV1AccountsAccountIdPaystubsGet200Response, Integer, Hash)>] ListPaystubsV1AccountsAccountIdPaystubsGet200Response data, response status code and response headers
    def list_paystubs_v1_accounts_account_id_paystubs_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.list_paystubs_v1_accounts_account_id_paystubs_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.list_paystubs_v1_accounts_account_id_paystubs_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.list_paystubs_v1_accounts_account_id_paystubs_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_paystubs_v1_accounts_account_id_paystubs_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_paystubs_v1_accounts_account_id_paystubs_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/accounts/{account_id}/paystubs".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:from_pay_date] = opts[:from_pay_date] if !opts[:from_pay_date].nil?
      query_params[:to_pay_date] = opts[:to_pay_date] if !opts[:to_pay_date].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListPaystubsV1AccountsAccountIdPaystubsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.list_paystubs_v1_accounts_account_id_paystubs_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#list_paystubs_v1_accounts_account_id_paystubs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Platforms
    # List all payroll platforms supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_esps ESP (employer-specific platform) is a term that is used to describe an Employer that uses a unique, dedicated payroll portal to serve their employees. Eg. - Walmart employees will authenticate via a Walmart payroll portal, whereas employees at Hilton will authenticate via ADP. ESPs can be thought of as both employers and platforms, so you can use this flag to include ESPs in the set of supported payroll platforms if desired. (default to false)
    # @option opts [String] :type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [ListPlatformsV1PlatformsGet200Response]
    def list_platforms_v1_platforms_get(pinwheel_version, opts = {})
      data, _status_code, _headers = list_platforms_v1_platforms_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Platforms
    # List all payroll platforms supported by Link. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_esps ESP (employer-specific platform) is a term that is used to describe an Employer that uses a unique, dedicated payroll portal to serve their employees. Eg. - Walmart employees will authenticate via a Walmart payroll portal, whereas employees at Hilton will authenticate via ADP. ESPs can be thought of as both employers and platforms, so you can use this flag to include ESPs in the set of supported payroll platforms if desired. (default to false)
    # @option opts [String] :type If included, filters results by the platform &#x60;type&#x60;. Platforms are either &#x60;payroll&#x60; or &#x60;time_and_attendance&#x60;. Most platforms are &#x60;payroll&#x60;. Payroll platforms support operations such as updating direct deposit allocation settings. Time &amp; Attendance platforms contain data around shifts and hours worked, but do not support payroll operations.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @option opts [Time] :last_updated Filter for results updated more recently than &#x60;last_updated&#x60;. ISO 8601 timestamp.
    # @return [Array<(ListPlatformsV1PlatformsGet200Response, Integer, Hash)>] ListPlatformsV1PlatformsGet200Response data, response status code and response headers
    def list_platforms_v1_platforms_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.list_platforms_v1_platforms_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.list_platforms_v1_platforms_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      allowable_values = ["payroll", "time_and_attendance", "tax"]
      if @api_client.config.client_side_validation && opts[:type] && !allowable_values.include?(opts[:type])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_platforms_v1_platforms_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_platforms_v1_platforms_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/platforms"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include_esps] = opts[:include_esps] if !opts[:include_esps].nil?
      query_params[:type] = opts[:type] if !opts[:type].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:last_updated] = opts[:last_updated] if !opts[:last_updated].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListPlatformsV1PlatformsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.list_platforms_v1_platforms_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#list_platforms_v1_platforms_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Shifts
    # The shifts endpoint allows you to query for ongoing and completed work performed by an end user. It includes details about shift dates, timestamps, the type of work, and associated earnings. Shifts are returned in reverse chronological order by `end_date`. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from_start_date Return shifts where the &#x60;start_date&#x60; field is on or after this date. ISO 8601 format.
    # @option opts [Date] :to_start_date Return shifts where the &#x60;start_date&#x60; field is on or before this date. ISO 8601 format.
    # @option opts [Date] :from_end_date Return shifts where the &#x60;end_date&#x60; field is on or after this date. ISO 8601 format.
    # @option opts [Date] :to_end_date Return shifts where the &#x60;end_date&#x60; field is on or before this date. ISO 8601 format.
    # @option opts [Integer] :limit The maximum number of results to return.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @return [ListShiftsV1AccountsAccountIdShiftsGet200Response]
    def list_shifts_v1_accounts_account_id_shifts_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = list_shifts_v1_accounts_account_id_shifts_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # List Shifts
    # The shifts endpoint allows you to query for ongoing and completed work performed by an end user. It includes details about shift dates, timestamps, the type of work, and associated earnings. Shifts are returned in reverse chronological order by &#x60;end_date&#x60;. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from_start_date Return shifts where the &#x60;start_date&#x60; field is on or after this date. ISO 8601 format.
    # @option opts [Date] :to_start_date Return shifts where the &#x60;start_date&#x60; field is on or before this date. ISO 8601 format.
    # @option opts [Date] :from_end_date Return shifts where the &#x60;end_date&#x60; field is on or after this date. ISO 8601 format.
    # @option opts [Date] :to_end_date Return shifts where the &#x60;end_date&#x60; field is on or before this date. ISO 8601 format.
    # @option opts [Integer] :limit The maximum number of results to return.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @return [Array<(ListShiftsV1AccountsAccountIdShiftsGet200Response, Integer, Hash)>] ListShiftsV1AccountsAccountIdShiftsGet200Response data, response status code and response headers
    def list_shifts_v1_accounts_account_id_shifts_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.list_shifts_v1_accounts_account_id_shifts_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.list_shifts_v1_accounts_account_id_shifts_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.list_shifts_v1_accounts_account_id_shifts_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_shifts_v1_accounts_account_id_shifts_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_shifts_v1_accounts_account_id_shifts_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/accounts/{account_id}/shifts".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:from_start_date] = opts[:from_start_date] if !opts[:from_start_date].nil?
      query_params[:to_start_date] = opts[:to_start_date] if !opts[:to_start_date].nil?
      query_params[:from_end_date] = opts[:from_end_date] if !opts[:from_end_date].nil?
      query_params[:to_end_date] = opts[:to_end_date] if !opts[:to_end_date].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListShiftsV1AccountsAccountIdShiftsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.list_shifts_v1_accounts_account_id_shifts_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#list_shifts_v1_accounts_account_id_shifts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Tax Forms
    # Lists all tax forms associated with a payroll account. Each tax form contains metadata like year, form type, and form ID. Tax forms are returned in reverse chronological order by year. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_year Filter for tax forms during or after this year.
    # @option opts [Integer] :to_year Filter for tax forms during or before this year.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return.
    # @return [ListTaxFormsV1AccountsAccountIdTaxFormsGet200Response]
    def list_tax_forms_v1_accounts_account_id_tax_forms_get(account_id, pinwheel_version, opts = {})
      data, _status_code, _headers = list_tax_forms_v1_accounts_account_id_tax_forms_get_with_http_info(account_id, pinwheel_version, opts)
      data
    end

    # List Tax Forms
    # Lists all tax forms associated with a payroll account. Each tax form contains metadata like year, form type, and form ID. Tax forms are returned in reverse chronological order by year. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_year Filter for tax forms during or after this year.
    # @option opts [Integer] :to_year Filter for tax forms during or before this year.
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return.
    # @return [Array<(ListTaxFormsV1AccountsAccountIdTaxFormsGet200Response, Integer, Hash)>] ListTaxFormsV1AccountsAccountIdTaxFormsGet200Response data, response status code and response headers
    def list_tax_forms_v1_accounts_account_id_tax_forms_get_with_http_info(account_id, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.list_tax_forms_v1_accounts_account_id_tax_forms_get ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.list_tax_forms_v1_accounts_account_id_tax_forms_get"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.list_tax_forms_v1_accounts_account_id_tax_forms_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_tax_forms_v1_accounts_account_id_tax_forms_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_tax_forms_v1_accounts_account_id_tax_forms_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/accounts/{account_id}/tax_forms".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:from_year] = opts[:from_year] if !opts[:from_year].nil?
      query_params[:to_year] = opts[:to_year] if !opts[:to_year].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListTaxFormsV1AccountsAccountIdTaxFormsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.list_tax_forms_v1_accounts_account_id_tax_forms_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#list_tax_forms_v1_accounts_account_id_tax_forms_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Company Connections
    # List all Company Connections. This is a paginated endpoint; see how Pinwheel implements pagination <a href='https://docs.pinwheelapi.com/docs/pagination-1' target='_blank'>here</a>.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [ListV1CompanyConnectionsGet200Response]
    def list_v1_company_connections_get(pinwheel_version, opts = {})
      data, _status_code, _headers = list_v1_company_connections_get_with_http_info(pinwheel_version, opts)
      data
    end

    # List Company Connections
    # List all Company Connections. This is a paginated endpoint; see how Pinwheel implements pagination &lt;a href&#x3D;&#39;https://docs.pinwheelapi.com/docs/pagination-1&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Cursor for the page you want to retrieve.
    # @option opts [Integer] :limit The maximum number of results to return. (default to 25)
    # @return [Array<(ListV1CompanyConnectionsGet200Response, Integer, Hash)>] ListV1CompanyConnectionsGet200Response data, response status code and response headers
    def list_v1_company_connections_get_with_http_info(pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.list_v1_company_connections_get ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.list_v1_company_connections_get"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_v1_company_connections_get, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PinwheelApi.list_v1_company_connections_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/company_connections"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListV1CompanyConnectionsGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.list_v1_company_connections_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#list_v1_company_connections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Override an account's monitoring status
    # Manually override a sandbox account's monitoring status.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param payroll_account_patch_monitoring_status [PayrollAccountPatchMonitoringStatus]
    # @param [Hash] opts the optional parameters
    # @return [GetAccountV1AccountsAccountIdGet200Response]
    def patch_monitoring_status_v1_sandbox_accounts_account_id_patch(account_id, pinwheel_version, payroll_account_patch_monitoring_status, opts = {})
      data, _status_code, _headers = patch_monitoring_status_v1_sandbox_accounts_account_id_patch_with_http_info(account_id, pinwheel_version, payroll_account_patch_monitoring_status, opts)
      data
    end

    # Override an account&#39;s monitoring status
    # Manually override a sandbox account&#39;s monitoring status.
    # @param account_id [String] UUID of the payroll account.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param payroll_account_patch_monitoring_status [PayrollAccountPatchMonitoringStatus]
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountV1AccountsAccountIdGet200Response, Integer, Hash)>] GetAccountV1AccountsAccountIdGet200Response data, response status code and response headers
    def patch_monitoring_status_v1_sandbox_accounts_account_id_patch_with_http_info(account_id, pinwheel_version, payroll_account_patch_monitoring_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.patch_monitoring_status_v1_sandbox_accounts_account_id_patch ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PinwheelApi.patch_monitoring_status_v1_sandbox_accounts_account_id_patch"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.patch_monitoring_status_v1_sandbox_accounts_account_id_patch"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'payroll_account_patch_monitoring_status' is set
      if @api_client.config.client_side_validation && payroll_account_patch_monitoring_status.nil?
        fail ArgumentError, "Missing the required parameter 'payroll_account_patch_monitoring_status' when calling PinwheelApi.patch_monitoring_status_v1_sandbox_accounts_account_id_patch"
      end
      # resource path
      local_var_path = "/sandbox/accounts/{account_id}".sub("{" + "account_id" + "}", CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payroll_account_patch_monitoring_status)

      # return_type
      return_type = opts[:debug_return_type] || "GetAccountV1AccountsAccountIdGet200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.patch_monitoring_status_v1_sandbox_accounts_account_id_patch",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#patch_monitoring_status_v1_sandbox_accounts_account_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Link Token
    # Create a Company Connect link token used to launch a Link modal.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param company_connect_link_token_create [CompanyConnectLinkTokenCreate]
    # @param [Hash] opts the optional parameters
    # @return [PostV1CompanyConnectLinkTokensPost200Response]
    def post_v1_company_connect_link_tokens_post(pinwheel_version, company_connect_link_token_create, opts = {})
      data, _status_code, _headers = post_v1_company_connect_link_tokens_post_with_http_info(pinwheel_version, company_connect_link_token_create, opts)
      data
    end

    # Create Link Token
    # Create a Company Connect link token used to launch a Link modal.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param company_connect_link_token_create [CompanyConnectLinkTokenCreate]
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostV1CompanyConnectLinkTokensPost200Response, Integer, Hash)>] PostV1CompanyConnectLinkTokensPost200Response data, response status code and response headers
    def post_v1_company_connect_link_tokens_post_with_http_info(pinwheel_version, company_connect_link_token_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.post_v1_company_connect_link_tokens_post ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.post_v1_company_connect_link_tokens_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'company_connect_link_token_create' is set
      if @api_client.config.client_side_validation && company_connect_link_token_create.nil?
        fail ArgumentError, "Missing the required parameter 'company_connect_link_token_create' when calling PinwheelApi.post_v1_company_connect_link_tokens_post"
      end
      # resource path
      local_var_path = "/company_connect/link_tokens"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(company_connect_link_token_create)

      # return_type
      return_type = opts[:debug_return_type] || "PostV1CompanyConnectLinkTokensPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.post_v1_company_connect_link_tokens_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#post_v1_company_connect_link_tokens_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Company Connection
    # Create a Company Connection used to get income & employment data from your target company.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param company_connection_create [CompanyConnectionCreate]
    # @param [Hash] opts the optional parameters
    # @return [PostV1CompanyConnectionsPost200Response]
    def post_v1_company_connections_post(pinwheel_version, company_connection_create, opts = {})
      data, _status_code, _headers = post_v1_company_connections_post_with_http_info(pinwheel_version, company_connection_create, opts)
      data
    end

    # Create Company Connection
    # Create a Company Connection used to get income &amp; employment data from your target company.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param company_connection_create [CompanyConnectionCreate]
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostV1CompanyConnectionsPost200Response, Integer, Hash)>] PostV1CompanyConnectionsPost200Response data, response status code and response headers
    def post_v1_company_connections_post_with_http_info(pinwheel_version, company_connection_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.post_v1_company_connections_post ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.post_v1_company_connections_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'company_connection_create' is set
      if @api_client.config.client_side_validation && company_connection_create.nil?
        fail ArgumentError, "Missing the required parameter 'company_connection_create' when calling PinwheelApi.post_v1_company_connections_post"
      end
      # resource path
      local_var_path = "/company_connections"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(company_connection_create)

      # return_type
      return_type = opts[:debug_return_type] || "PostV1CompanyConnectionsPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.post_v1_company_connections_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#post_v1_company_connections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Link Token
    # Create a token used to launch a Link modal.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param link_token_create_v20231122 [LinkTokenCreateV20231122]
    # @param [Hash] opts the optional parameters
    # @return [PostV1LinkTokensPost200Response]
    def post_v1_link_tokens_post(pinwheel_version, link_token_create_v20231122, opts = {})
      data, _status_code, _headers = post_v1_link_tokens_post_with_http_info(pinwheel_version, link_token_create_v20231122, opts)
      data
    end

    # Create Link Token
    # Create a token used to launch a Link modal.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param link_token_create_v20231122 [LinkTokenCreateV20231122]
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostV1LinkTokensPost200Response, Integer, Hash)>] PostV1LinkTokensPost200Response data, response status code and response headers
    def post_v1_link_tokens_post_with_http_info(pinwheel_version, link_token_create_v20231122, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.post_v1_link_tokens_post ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.post_v1_link_tokens_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'link_token_create_v20231122' is set
      if @api_client.config.client_side_validation && link_token_create_v20231122.nil?
        fail ArgumentError, "Missing the required parameter 'link_token_create_v20231122' when calling PinwheelApi.post_v1_link_tokens_post"
      end
      # resource path
      local_var_path = "/link_tokens"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(link_token_create_v20231122)

      # return_type
      return_type = opts[:debug_return_type] || "PostV1LinkTokensPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.post_v1_link_tokens_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#post_v1_link_tokens_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Webhook
    # Create a webhook to use for callbacks from Pinwheel jobs.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param webhook_create_v20230418 [WebhookCreateV20230418]
    # @param [Hash] opts the optional parameters
    # @return [PostV1WebhooksPost200Response]
    def post_v1_webhooks_post(pinwheel_version, webhook_create_v20230418, opts = {})
      data, _status_code, _headers = post_v1_webhooks_post_with_http_info(pinwheel_version, webhook_create_v20230418, opts)
      data
    end

    # Create Webhook
    # Create a webhook to use for callbacks from Pinwheel jobs.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param webhook_create_v20230418 [WebhookCreateV20230418]
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostV1WebhooksPost200Response, Integer, Hash)>] PostV1WebhooksPost200Response data, response status code and response headers
    def post_v1_webhooks_post_with_http_info(pinwheel_version, webhook_create_v20230418, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.post_v1_webhooks_post ..."
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.post_v1_webhooks_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'webhook_create_v20230418' is set
      if @api_client.config.client_side_validation && webhook_create_v20230418.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_create_v20230418' when calling PinwheelApi.post_v1_webhooks_post"
      end
      # resource path
      local_var_path = "/webhooks"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(webhook_create_v20230418)

      # return_type
      return_type = opts[:debug_return_type] || "PostV1WebhooksPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.post_v1_webhooks_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#post_v1_webhooks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Webhook
    # Update webhook.
    # @param webhook_id [String] UUID of the webhook.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param webhook_update [WebhookUpdate]
    # @param [Hash] opts the optional parameters
    # @return [PostV1WebhooksPost200Response]
    def put_v1_webhooks_webhook_id_put(webhook_id, pinwheel_version, webhook_update, opts = {})
      data, _status_code, _headers = put_v1_webhooks_webhook_id_put_with_http_info(webhook_id, pinwheel_version, webhook_update, opts)
      data
    end

    # Update Webhook
    # Update webhook.
    # @param webhook_id [String] UUID of the webhook.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param webhook_update [WebhookUpdate]
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostV1WebhooksPost200Response, Integer, Hash)>] PostV1WebhooksPost200Response data, response status code and response headers
    def put_v1_webhooks_webhook_id_put_with_http_info(webhook_id, pinwheel_version, webhook_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.put_v1_webhooks_webhook_id_put ..."
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling PinwheelApi.put_v1_webhooks_webhook_id_put"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.put_v1_webhooks_webhook_id_put"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'webhook_update' is set
      if @api_client.config.client_side_validation && webhook_update.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_update' when calling PinwheelApi.put_v1_webhooks_webhook_id_put"
      end
      # resource path
      local_var_path = "/webhooks/{webhook_id}".sub("{" + "webhook_id" + "}", CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end
      header_params[:"Pinwheel-Version"] = pinwheel_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(webhook_update)

      # return_type
      return_type = opts[:debug_return_type] || "PostV1WebhooksPost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["apiSecret"]

      new_options = opts.merge(
        operation: :"PinwheelApi.put_v1_webhooks_webhook_id_put",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#put_v1_webhooks_webhook_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Revoke an API Key
    # Revokes an API Key.
    # @param api_key [String] The public token that refers to your API key, as distinct from the API Secret.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Admin API bearer token.
    # @return [RevokeKeyV1AdminApiKeysApiKeyRevokePost200Response]
    def revoke_key_v1_admin_api_keys_api_key_revoke_post(api_key, pinwheel_version, opts = {})
      data, _status_code, _headers = revoke_key_v1_admin_api_keys_api_key_revoke_post_with_http_info(api_key, pinwheel_version, opts)
      data
    end

    # Revoke an API Key
    # Revokes an API Key.
    # @param api_key [String] The public token that refers to your API key, as distinct from the API Secret.
    # @param pinwheel_version [String] Version identifier specifying how the Pinwheel API should behave. See the Change Management page for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Admin API bearer token.
    # @return [Array<(RevokeKeyV1AdminApiKeysApiKeyRevokePost200Response, Integer, Hash)>] RevokeKeyV1AdminApiKeysApiKeyRevokePost200Response data, response status code and response headers
    def revoke_key_v1_admin_api_keys_api_key_revoke_post_with_http_info(api_key, pinwheel_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PinwheelApi.revoke_key_v1_admin_api_keys_api_key_revoke_post ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling PinwheelApi.revoke_key_v1_admin_api_keys_api_key_revoke_post"
      end
      # verify the required parameter 'pinwheel_version' is set
      if @api_client.config.client_side_validation && pinwheel_version.nil?
        fail ArgumentError, "Missing the required parameter 'pinwheel_version' when calling PinwheelApi.revoke_key_v1_admin_api_keys_api_key_revoke_post"
      end
      # verify enum value
      allowable_values = ["2023-11-22", "2023-07-18", "2023-04-18", "2022-09-09", "2022-06-22", "2022-03-02"]
      if @api_client.config.client_side_validation && !allowable_values.include?(pinwheel_version)
        fail ArgumentError, "invalid value for \"pinwheel_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = "/admin/api_keys/{api_key}/revoke".sub("{" + "api_key" + "}", CGI.escape(api_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params[:"Pinwheel-Version"] = pinwheel_version
      header_params[:authorization] = opts[:authorization] if !opts[:authorization].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "RevokeKeyV1AdminApiKeysApiKeyRevokePost200Response"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["bearerAuth"]

      new_options = opts.merge(
        operation: :"PinwheelApi.revoke_key_v1_admin_api_keys_api_key_revoke_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinwheelApi#revoke_key_v1_admin_api_keys_api_key_revoke_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
