=begin
#Pinwheel

#Pinwheel is the API for Payroll

The version of the OpenAPI document: v2023-11-22
Contact: support@getpinwheel.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module Pinwheel
  class LinkUserAuthenticationDataObjCreate
    # Full 9-digit social security number of the user. Required if `social_security_last_four` is omitted. Using full SSN will improve conversion.
    attr_accessor :social_security_number

    # Last four digits of the user's social security number. Required if `social_security_number` is omitted.
    attr_accessor :social_security_number_last_four

    # The user's date of birth in `YYYY-MM-DD` format.
    attr_accessor :date_of_birth

    # The user's first name.
    attr_accessor :last_name

    # The user's last name.
    attr_accessor :first_name

    # The users's 10-digit mobile phone number. Do not include country code.
    attr_accessor :mobile_phone_number

    # The user's 5-digit home zip code.
    attr_accessor :home_address_zip_code

    # The user's email. The email must have valid syntax with an @ and valid domain e.g. `name@example.com`. If provided email is invalid a 400 will be returned. For more details on validation see https://github.com/JoshData/python-email-validator.
    attr_accessor :email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'social_security_number' => :'social_security_number',
        :'social_security_number_last_four' => :'social_security_number_last_four',
        :'date_of_birth' => :'date_of_birth',
        :'last_name' => :'last_name',
        :'first_name' => :'first_name',
        :'mobile_phone_number' => :'mobile_phone_number',
        :'home_address_zip_code' => :'home_address_zip_code',
        :'email' => :'email'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'social_security_number' => :'String',
        :'social_security_number_last_four' => :'String',
        :'date_of_birth' => :'Date',
        :'last_name' => :'String',
        :'first_name' => :'String',
        :'mobile_phone_number' => :'String',
        :'home_address_zip_code' => :'String',
        :'email' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Pinwheel::LinkUserAuthenticationDataObjCreate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Pinwheel::LinkUserAuthenticationDataObjCreate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'social_security_number')
        self.social_security_number = attributes[:'social_security_number']
      end

      if attributes.key?(:'social_security_number_last_four')
        self.social_security_number_last_four = attributes[:'social_security_number_last_four']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      else
        self.date_of_birth = nil
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      else
        self.last_name = nil
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      else
        self.first_name = nil
      end

      if attributes.key?(:'mobile_phone_number')
        self.mobile_phone_number = attributes[:'mobile_phone_number']
      else
        self.mobile_phone_number = nil
      end

      if attributes.key?(:'home_address_zip_code')
        self.home_address_zip_code = attributes[:'home_address_zip_code']
      else
        self.home_address_zip_code = nil
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@social_security_number.nil? && @social_security_number.to_s.length > 9
        invalid_properties.push('invalid value for "social_security_number", the character length must be smaller than or equal to 9.')
      end

      if !@social_security_number.nil? && @social_security_number.to_s.length < 9
        invalid_properties.push('invalid value for "social_security_number", the character length must be great than or equal to 9.')
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if !@social_security_number.nil? && @social_security_number !~ pattern
        invalid_properties.push("invalid value for \"social_security_number\", must conform to the pattern #{pattern}.")
      end

      if !@social_security_number_last_four.nil? && @social_security_number_last_four.to_s.length > 4
        invalid_properties.push('invalid value for "social_security_number_last_four", the character length must be smaller than or equal to 4.')
      end

      if !@social_security_number_last_four.nil? && @social_security_number_last_four.to_s.length < 4
        invalid_properties.push('invalid value for "social_security_number_last_four", the character length must be great than or equal to 4.')
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if !@social_security_number_last_four.nil? && @social_security_number_last_four !~ pattern
        invalid_properties.push("invalid value for \"social_security_number_last_four\", must conform to the pattern #{pattern}.")
      end

      if @date_of_birth.nil?
        invalid_properties.push('invalid value for "date_of_birth", date_of_birth cannot be nil.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @mobile_phone_number.nil?
        invalid_properties.push('invalid value for "mobile_phone_number", mobile_phone_number cannot be nil.')
      end

      if @mobile_phone_number.to_s.length > 10
        invalid_properties.push('invalid value for "mobile_phone_number", the character length must be smaller than or equal to 10.')
      end

      if @mobile_phone_number.to_s.length < 10
        invalid_properties.push('invalid value for "mobile_phone_number", the character length must be great than or equal to 10.')
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if @mobile_phone_number !~ pattern
        invalid_properties.push("invalid value for \"mobile_phone_number\", must conform to the pattern #{pattern}.")
      end

      if @home_address_zip_code.nil?
        invalid_properties.push('invalid value for "home_address_zip_code", home_address_zip_code cannot be nil.')
      end

      if @home_address_zip_code.to_s.length > 5
        invalid_properties.push('invalid value for "home_address_zip_code", the character length must be smaller than or equal to 5.')
      end

      if @home_address_zip_code.to_s.length < 5
        invalid_properties.push('invalid value for "home_address_zip_code", the character length must be great than or equal to 5.')
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if @home_address_zip_code !~ pattern
        invalid_properties.push("invalid value for \"home_address_zip_code\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@social_security_number.nil? && @social_security_number.to_s.length > 9
      return false if !@social_security_number.nil? && @social_security_number.to_s.length < 9
      return false if !@social_security_number.nil? && @social_security_number !~ Regexp.new(/^[0-9]*$/)
      return false if !@social_security_number_last_four.nil? && @social_security_number_last_four.to_s.length > 4
      return false if !@social_security_number_last_four.nil? && @social_security_number_last_four.to_s.length < 4
      return false if !@social_security_number_last_four.nil? && @social_security_number_last_four !~ Regexp.new(/^[0-9]*$/)
      return false if @date_of_birth.nil?
      return false if @last_name.nil?
      return false if @first_name.nil?
      return false if @mobile_phone_number.nil?
      return false if @mobile_phone_number.to_s.length > 10
      return false if @mobile_phone_number.to_s.length < 10
      return false if @mobile_phone_number !~ Regexp.new(/^[0-9]*$/)
      return false if @home_address_zip_code.nil?
      return false if @home_address_zip_code.to_s.length > 5
      return false if @home_address_zip_code.to_s.length < 5
      return false if @home_address_zip_code !~ Regexp.new(/^[0-9]*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] social_security_number Value to be assigned
    def social_security_number=(social_security_number)
      if social_security_number.nil?
        fail ArgumentError, 'social_security_number cannot be nil'
      end

      if social_security_number.to_s.length > 9
        fail ArgumentError, 'invalid value for "social_security_number", the character length must be smaller than or equal to 9.'
      end

      if social_security_number.to_s.length < 9
        fail ArgumentError, 'invalid value for "social_security_number", the character length must be great than or equal to 9.'
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if social_security_number !~ pattern
        fail ArgumentError, "invalid value for \"social_security_number\", must conform to the pattern #{pattern}."
      end

      @social_security_number = social_security_number
    end

    # Custom attribute writer method with validation
    # @param [Object] social_security_number_last_four Value to be assigned
    def social_security_number_last_four=(social_security_number_last_four)
      if social_security_number_last_four.nil?
        fail ArgumentError, 'social_security_number_last_four cannot be nil'
      end

      if social_security_number_last_four.to_s.length > 4
        fail ArgumentError, 'invalid value for "social_security_number_last_four", the character length must be smaller than or equal to 4.'
      end

      if social_security_number_last_four.to_s.length < 4
        fail ArgumentError, 'invalid value for "social_security_number_last_four", the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if social_security_number_last_four !~ pattern
        fail ArgumentError, "invalid value for \"social_security_number_last_four\", must conform to the pattern #{pattern}."
      end

      @social_security_number_last_four = social_security_number_last_four
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_phone_number Value to be assigned
    def mobile_phone_number=(mobile_phone_number)
      if mobile_phone_number.nil?
        fail ArgumentError, 'mobile_phone_number cannot be nil'
      end

      if mobile_phone_number.to_s.length > 10
        fail ArgumentError, 'invalid value for "mobile_phone_number", the character length must be smaller than or equal to 10.'
      end

      if mobile_phone_number.to_s.length < 10
        fail ArgumentError, 'invalid value for "mobile_phone_number", the character length must be great than or equal to 10.'
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if mobile_phone_number !~ pattern
        fail ArgumentError, "invalid value for \"mobile_phone_number\", must conform to the pattern #{pattern}."
      end

      @mobile_phone_number = mobile_phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] home_address_zip_code Value to be assigned
    def home_address_zip_code=(home_address_zip_code)
      if home_address_zip_code.nil?
        fail ArgumentError, 'home_address_zip_code cannot be nil'
      end

      if home_address_zip_code.to_s.length > 5
        fail ArgumentError, 'invalid value for "home_address_zip_code", the character length must be smaller than or equal to 5.'
      end

      if home_address_zip_code.to_s.length < 5
        fail ArgumentError, 'invalid value for "home_address_zip_code", the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[0-9]*$/)
      if home_address_zip_code !~ pattern
        fail ArgumentError, "invalid value for \"home_address_zip_code\", must conform to the pattern #{pattern}."
      end

      @home_address_zip_code = home_address_zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          social_security_number == o.social_security_number &&
          social_security_number_last_four == o.social_security_number_last_four &&
          date_of_birth == o.date_of_birth &&
          last_name == o.last_name &&
          first_name == o.first_name &&
          mobile_phone_number == o.mobile_phone_number &&
          home_address_zip_code == o.home_address_zip_code &&
          email == o.email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [social_security_number, social_security_number_last_four, date_of_birth, last_name, first_name, mobile_phone_number, home_address_zip_code, email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Pinwheel.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
