=begin
#Pinwheel

#Pinwheel is the API for Payroll

The version of the OpenAPI document: v2023-11-22
Contact: support@getpinwheel.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module Pinwheel
  class LinkTokenCreateV20231122
    # An array of job types required to be performed on the user's payroll account. Employers and platforms that do not support ALL of these jobs will not be visible to the user. This property is required unless the account_id property is set.
    attr_accessor :required_jobs

    # Organization or app name that is displayed to the user.
    attr_accessor :org_name

    # Allocation specified for the link token.
    attr_accessor :allocation

    # If set to true, intro screen is not shown to user.
    attr_accessor :skip_intro_screen

    # UUID of an employer. If set, user is taken directly to Link login screen.
    attr_accessor :employer_id

    # If set to true, user will not be given the option to choose between a full or partial direct deposit switch. Only relevant with job `direct_deposit_switch`. Defaults to false.
    attr_accessor :disable_direct_deposit_splitting

    # UUID of a platform. If set, user is taken directly to Link login screen.
    attr_accessor :platform_id

    attr_accessor :platform_type

    attr_accessor :language

    # User ID provided by you, to associate Pinwheel users with your user model. Required if `account_id` is not provided. This ID will be returned in all webhook events and all account-affiliated API responses. Leading and trailing whitespace will be stripped. Do not include PII in this identifier.
    attr_accessor :end_user_id

    # UUID of the payroll account.
    attr_accessor :account_id

    attr_accessor :document_uploads

    # Tags associated with the Link token. These are restricted to string key-value pairs.
    attr_accessor :tags

    attr_accessor :deposit_forms

    # Optional field where data about an end user can be provided to enable products such as automated platform matching.
    attr_accessor :end_user

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'required_jobs' => :'required_jobs',
        :'org_name' => :'org_name',
        :'allocation' => :'allocation',
        :'skip_intro_screen' => :'skip_intro_screen',
        :'employer_id' => :'employer_id',
        :'disable_direct_deposit_splitting' => :'disable_direct_deposit_splitting',
        :'platform_id' => :'platform_id',
        :'platform_type' => :'platform_type',
        :'language' => :'language',
        :'end_user_id' => :'end_user_id',
        :'account_id' => :'account_id',
        :'document_uploads' => :'document_uploads',
        :'tags' => :'tags',
        :'deposit_forms' => :'deposit_forms',
        :'end_user' => :'end_user'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'required_jobs' => :'Array<String>',
        :'org_name' => :'String',
        :'allocation' => :'Allocation',
        :'skip_intro_screen' => :'Boolean',
        :'employer_id' => :'String',
        :'disable_direct_deposit_splitting' => :'Boolean',
        :'platform_id' => :'String',
        :'platform_type' => :'String',
        :'language' => :'String',
        :'end_user_id' => :'String',
        :'account_id' => :'String',
        :'document_uploads' => :'String',
        :'tags' => :'Hash<String, String>',
        :'deposit_forms' => :'String',
        :'end_user' => :'EndUser'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Pinwheel::LinkTokenCreateV20231122` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Pinwheel::LinkTokenCreateV20231122`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'required_jobs')
        if (value = attributes[:'required_jobs']).is_a?(Array)
          self.required_jobs = value
        end
      end

      if attributes.key?(:'org_name')
        self.org_name = attributes[:'org_name']
      else
        self.org_name = nil
      end

      if attributes.key?(:'allocation')
        self.allocation = attributes[:'allocation']
      end

      if attributes.key?(:'skip_intro_screen')
        self.skip_intro_screen = attributes[:'skip_intro_screen']
      else
        self.skip_intro_screen = false
      end

      if attributes.key?(:'employer_id')
        self.employer_id = attributes[:'employer_id']
      end

      if attributes.key?(:'disable_direct_deposit_splitting')
        self.disable_direct_deposit_splitting = attributes[:'disable_direct_deposit_splitting']
      else
        self.disable_direct_deposit_splitting = false
      end

      if attributes.key?(:'platform_id')
        self.platform_id = attributes[:'platform_id']
      end

      if attributes.key?(:'platform_type')
        self.platform_type = attributes[:'platform_type']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'end_user_id')
        self.end_user_id = attributes[:'end_user_id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'document_uploads')
        self.document_uploads = attributes[:'document_uploads']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.key?(:'deposit_forms')
        self.deposit_forms = attributes[:'deposit_forms']
      end

      if attributes.key?(:'end_user')
        self.end_user = attributes[:'end_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @org_name.nil?
        invalid_properties.push('invalid value for "org_name", org_name cannot be nil.')
      end

      if @org_name.to_s.length > 30
        invalid_properties.push('invalid value for "org_name", the character length must be smaller than or equal to 30.')
      end

      if @org_name.to_s.length < 3
        invalid_properties.push('invalid value for "org_name", the character length must be great than or equal to 3.')
      end

      if !@end_user_id.nil? && @end_user_id.to_s.length > 255
        invalid_properties.push('invalid value for "end_user_id", the character length must be smaller than or equal to 255.')
      end

      if !@end_user_id.nil? && @end_user_id.to_s.length < 1
        invalid_properties.push('invalid value for "end_user_id", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @org_name.nil?
      return false if @org_name.to_s.length > 30
      return false if @org_name.to_s.length < 3
      platform_type_validator = EnumAttributeValidator.new('String', ["payroll", "time_and_attendance", "tax"])
      return false unless platform_type_validator.valid?(@platform_type)
      language_validator = EnumAttributeValidator.new('String', ["en", "es"])
      return false unless language_validator.valid?(@language)
      return false if !@end_user_id.nil? && @end_user_id.to_s.length > 255
      return false if !@end_user_id.nil? && @end_user_id.to_s.length < 1
      document_uploads_validator = EnumAttributeValidator.new('String', ["direct", "fallback", "disabled"])
      return false unless document_uploads_validator.valid?(@document_uploads)
      deposit_forms_validator = EnumAttributeValidator.new('String', ["direct", "fallback", "disabled"])
      return false unless deposit_forms_validator.valid?(@deposit_forms)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] org_name Value to be assigned
    def org_name=(org_name)
      if org_name.nil?
        fail ArgumentError, 'org_name cannot be nil'
      end

      if org_name.to_s.length > 30
        fail ArgumentError, 'invalid value for "org_name", the character length must be smaller than or equal to 30.'
      end

      if org_name.to_s.length < 3
        fail ArgumentError, 'invalid value for "org_name", the character length must be great than or equal to 3.'
      end

      @org_name = org_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform_type Object to be assigned
    def platform_type=(platform_type)
      validator = EnumAttributeValidator.new('String', ["payroll", "time_and_attendance", "tax"])
      unless validator.valid?(platform_type)
        fail ArgumentError, "invalid value for \"platform_type\", must be one of #{validator.allowable_values}."
      end
      @platform_type = platform_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] language Object to be assigned
    def language=(language)
      validator = EnumAttributeValidator.new('String', ["en", "es"])
      unless validator.valid?(language)
        fail ArgumentError, "invalid value for \"language\", must be one of #{validator.allowable_values}."
      end
      @language = language
    end

    # Custom attribute writer method with validation
    # @param [Object] end_user_id Value to be assigned
    def end_user_id=(end_user_id)
      if end_user_id.nil?
        fail ArgumentError, 'end_user_id cannot be nil'
      end

      if end_user_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "end_user_id", the character length must be smaller than or equal to 255.'
      end

      if end_user_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "end_user_id", the character length must be great than or equal to 1.'
      end

      @end_user_id = end_user_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_uploads Object to be assigned
    def document_uploads=(document_uploads)
      validator = EnumAttributeValidator.new('String', ["direct", "fallback", "disabled"])
      unless validator.valid?(document_uploads)
        fail ArgumentError, "invalid value for \"document_uploads\", must be one of #{validator.allowable_values}."
      end
      @document_uploads = document_uploads
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deposit_forms Object to be assigned
    def deposit_forms=(deposit_forms)
      validator = EnumAttributeValidator.new('String', ["direct", "fallback", "disabled"])
      unless validator.valid?(deposit_forms)
        fail ArgumentError, "invalid value for \"deposit_forms\", must be one of #{validator.allowable_values}."
      end
      @deposit_forms = deposit_forms
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          required_jobs == o.required_jobs &&
          org_name == o.org_name &&
          allocation == o.allocation &&
          skip_intro_screen == o.skip_intro_screen &&
          employer_id == o.employer_id &&
          disable_direct_deposit_splitting == o.disable_direct_deposit_splitting &&
          platform_id == o.platform_id &&
          platform_type == o.platform_type &&
          language == o.language &&
          end_user_id == o.end_user_id &&
          account_id == o.account_id &&
          document_uploads == o.document_uploads &&
          tags == o.tags &&
          deposit_forms == o.deposit_forms &&
          end_user == o.end_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [required_jobs, org_name, allocation, skip_intro_screen, employer_id, disable_direct_deposit_splitting, platform_id, platform_type, language, end_user_id, account_id, document_uploads, tags, deposit_forms, end_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Pinwheel.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
