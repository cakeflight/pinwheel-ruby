# #Pinwheel
#
# Pinwheel is the API for Payroll
#
# The version of the OpenAPI document: v2023-11-22
# Contact: support@getpinwheel.com
# Generated by: https://openapi-generator.tech
# Generator version: 7.8.0
#

require "date"
require "time"

module Pinwheel
  class AnnualIncomeResponseObj
    # Year for which the income represents.
    attr_accessor :year

    # The cumulative year to date total earnings before any taxes or deductions are removed.
    attr_accessor :gross_pay_ytd

    # The cumulative year to date total earnings after all taxes and deductions are removed.
    attr_accessor :net_pay_ytd

    # The cumulative year to date total deductions.
    attr_accessor :total_deductions_ytd

    # The cumulative year to date total reimbursements.
    attr_accessor :total_reimbursements_ytd

    # The cumulative year to date total taxes.
    attr_accessor :total_taxes_ytd

    # The cumulative year to date amount for all earnings.
    attr_accessor :earnings_ytds

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        year: :year,
        gross_pay_ytd: :gross_pay_ytd,
        net_pay_ytd: :net_pay_ytd,
        total_deductions_ytd: :total_deductions_ytd,
        total_reimbursements_ytd: :total_reimbursements_ytd,
        total_taxes_ytd: :total_taxes_ytd,
        earnings_ytds: :earnings_ytds
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        year: :String,
        gross_pay_ytd: :Integer,
        net_pay_ytd: :Integer,
        total_deductions_ytd: :Integer,
        total_reimbursements_ytd: :Integer,
        total_taxes_ytd: :Integer,
        earnings_ytds: :"Array<EarningsYtds>"
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `Pinwheel::AnnualIncomeResponseObj` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `Pinwheel::AnnualIncomeResponseObj`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      self.year = if attributes.key?(:year)
        attributes[:year]
      end

      self.gross_pay_ytd = if attributes.key?(:gross_pay_ytd)
        attributes[:gross_pay_ytd]
      end

      self.net_pay_ytd = if attributes.key?(:net_pay_ytd)
        attributes[:net_pay_ytd]
      end

      self.total_deductions_ytd = if attributes.key?(:total_deductions_ytd)
        attributes[:total_deductions_ytd]
      end

      self.total_reimbursements_ytd = if attributes.key?(:total_reimbursements_ytd)
        attributes[:total_reimbursements_ytd]
      end

      self.total_taxes_ytd = if attributes.key?(:total_taxes_ytd)
        attributes[:total_taxes_ytd]
      end

      if attributes.key?(:earnings_ytds)
        if (value = attributes[:earnings_ytds]).is_a?(Array)
          self.earnings_ytds = value
        end
      else
        self.earnings_ytds = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn "[DEPRECATED] the `list_invalid_properties` method is obsolete"
      invalid_properties = []
      if @year.nil?
        invalid_properties.push('invalid value for "year", year cannot be nil.')
      end

      if @gross_pay_ytd.nil?
        invalid_properties.push('invalid value for "gross_pay_ytd", gross_pay_ytd cannot be nil.')
      end

      if @net_pay_ytd.nil?
        invalid_properties.push('invalid value for "net_pay_ytd", net_pay_ytd cannot be nil.')
      end

      if @total_deductions_ytd.nil?
        invalid_properties.push('invalid value for "total_deductions_ytd", total_deductions_ytd cannot be nil.')
      end

      if @total_reimbursements_ytd.nil?
        invalid_properties.push('invalid value for "total_reimbursements_ytd", total_reimbursements_ytd cannot be nil.')
      end

      if @total_taxes_ytd.nil?
        invalid_properties.push('invalid value for "total_taxes_ytd", total_taxes_ytd cannot be nil.')
      end

      if @earnings_ytds.nil?
        invalid_properties.push('invalid value for "earnings_ytds", earnings_ytds cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn "[DEPRECATED] the `valid?` method is obsolete"
      return false if @year.nil?
      return false if @gross_pay_ytd.nil?
      return false if @net_pay_ytd.nil?
      return false if @total_deductions_ytd.nil?
      return false if @total_reimbursements_ytd.nil?
      return false if @total_taxes_ytd.nil?
      return false if @earnings_ytds.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
        year == other.year &&
        gross_pay_ytd == other.gross_pay_ytd &&
        net_pay_ytd == other.net_pay_ytd &&
        total_deductions_ytd == other.total_deductions_ytd &&
        total_reimbursements_ytd == other.total_reimbursements_ytd &&
        total_taxes_ytd == other.total_taxes_ytd &&
        earnings_ytds == other.earnings_ytds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [year, gross_pay_ytd, net_pay_ytd, total_deductions_ytd, total_reimbursements_ytd, total_taxes_ytd, earnings_ytds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash[key.to_s] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Pinwheel.const_get(type)
        (klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of)) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
