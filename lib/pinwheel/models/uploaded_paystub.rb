=begin
#Pinwheel

#Pinwheel is the API for Payroll

The version of the OpenAPI document: v2023-11-22
Contact: support@getpinwheel.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module Pinwheel
  class UploadedPaystub
    # The type of the document.
    attr_accessor :document_type

    # The date when the check amount is paid to the employee.
    attr_accessor :pay_date

    # The date when the pay period begins. Some platforms, like unemployment portals, do not have fixed pay periods.
    attr_accessor :pay_period_start

    # The date when the pay period ends. Some platforms, like unemployment portals, do not have fixed pay periods.
    attr_accessor :pay_period_end

    # The total earnings before any deductions are made.
    attr_accessor :gross_pay_amount

    # The cumulative year to date total earnings before any taxes or deductions are removed.
    attr_accessor :gross_pay_ytd

    # The total earnings after all taxes and deductions are removed.
    attr_accessor :net_pay_amount

    # The cumulative year to date total earnings after all taxes and deductions are removed.
    attr_accessor :net_pay_ytd

    # The earnings for this pay period.
    attr_accessor :earnings

    # The taxes for this pay period.
    attr_accessor :taxes

    # The deductions for this pay period.
    attr_accessor :deductions

    # Employment details for the employee.
    attr_accessor :employer

    # Personal details for the employee.
    attr_accessor :employee

    # The user's time off balances for this pay period. To enable time off balances, please contact Pinwheel support.
    attr_accessor :time_off

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'document_type' => :'document_type',
        :'pay_date' => :'pay_date',
        :'pay_period_start' => :'pay_period_start',
        :'pay_period_end' => :'pay_period_end',
        :'gross_pay_amount' => :'gross_pay_amount',
        :'gross_pay_ytd' => :'gross_pay_ytd',
        :'net_pay_amount' => :'net_pay_amount',
        :'net_pay_ytd' => :'net_pay_ytd',
        :'earnings' => :'earnings',
        :'taxes' => :'taxes',
        :'deductions' => :'deductions',
        :'employer' => :'employer',
        :'employee' => :'employee',
        :'time_off' => :'time_off'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'document_type' => :'String',
        :'pay_date' => :'String',
        :'pay_period_start' => :'String',
        :'pay_period_end' => :'String',
        :'gross_pay_amount' => :'Integer',
        :'gross_pay_ytd' => :'Integer',
        :'net_pay_amount' => :'Integer',
        :'net_pay_ytd' => :'Integer',
        :'earnings' => :'Array<UploadedEarning>',
        :'taxes' => :'Array<UploadedTax>',
        :'deductions' => :'Array<UploadedDeduction>',
        :'employer' => :'EmployerNameAndAddress',
        :'employee' => :'EmployeeNameAndAddress',
        :'time_off' => :'Array<UploadedTimeOff>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Pinwheel::UploadedPaystub` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Pinwheel::UploadedPaystub`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'document_type')
        self.document_type = attributes[:'document_type']
      else
        self.document_type = 'paystub'
      end

      if attributes.key?(:'pay_date')
        self.pay_date = attributes[:'pay_date']
      end

      if attributes.key?(:'pay_period_start')
        self.pay_period_start = attributes[:'pay_period_start']
      end

      if attributes.key?(:'pay_period_end')
        self.pay_period_end = attributes[:'pay_period_end']
      end

      if attributes.key?(:'gross_pay_amount')
        self.gross_pay_amount = attributes[:'gross_pay_amount']
      end

      if attributes.key?(:'gross_pay_ytd')
        self.gross_pay_ytd = attributes[:'gross_pay_ytd']
      end

      if attributes.key?(:'net_pay_amount')
        self.net_pay_amount = attributes[:'net_pay_amount']
      end

      if attributes.key?(:'net_pay_ytd')
        self.net_pay_ytd = attributes[:'net_pay_ytd']
      end

      if attributes.key?(:'earnings')
        if (value = attributes[:'earnings']).is_a?(Array)
          self.earnings = value
        end
      end

      if attributes.key?(:'taxes')
        if (value = attributes[:'taxes']).is_a?(Array)
          self.taxes = value
        end
      end

      if attributes.key?(:'deductions')
        if (value = attributes[:'deductions']).is_a?(Array)
          self.deductions = value
        end
      end

      if attributes.key?(:'employer')
        self.employer = attributes[:'employer']
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'time_off')
        if (value = attributes[:'time_off']).is_a?(Array)
          self.time_off = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      document_type_validator = EnumAttributeValidator.new('String', ["paystub"])
      return false unless document_type_validator.valid?(@document_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_type Object to be assigned
    def document_type=(document_type)
      validator = EnumAttributeValidator.new('String', ["paystub"])
      unless validator.valid?(document_type)
        fail ArgumentError, "invalid value for \"document_type\", must be one of #{validator.allowable_values}."
      end
      @document_type = document_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          document_type == o.document_type &&
          pay_date == o.pay_date &&
          pay_period_start == o.pay_period_start &&
          pay_period_end == o.pay_period_end &&
          gross_pay_amount == o.gross_pay_amount &&
          gross_pay_ytd == o.gross_pay_ytd &&
          net_pay_amount == o.net_pay_amount &&
          net_pay_ytd == o.net_pay_ytd &&
          earnings == o.earnings &&
          taxes == o.taxes &&
          deductions == o.deductions &&
          employer == o.employer &&
          employee == o.employee &&
          time_off == o.time_off
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [document_type, pay_date, pay_period_start, pay_period_end, gross_pay_amount, gross_pay_ytd, net_pay_amount, net_pay_ytd, earnings, taxes, deductions, employer, employee, time_off].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Pinwheel.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
