# #Pinwheel
#
# Pinwheel is the API for Payroll
#
# The version of the OpenAPI document: v2023-11-22
# Contact: support@getpinwheel.com
# Generated by: https://openapi-generator.tech
# Generator version: 7.7.0
#

require "date"
require "time"

module Pinwheel
  class TaxFormW2
    # The type of the document.
    attr_accessor :document_type

    # Employee's social security number. Box a IRS Form W-2.
    attr_accessor :box_a

    # Employer identification number (EIN). Box b IRS Form W-2.
    attr_accessor :box_b

    # Employer's name and address. Box c IRS Form W-2.
    attr_accessor :box_c

    # Control number. Box d IRS Form W-2.
    attr_accessor :box_d

    # Employee's name. Box e IRS Form Form W-2.
    attr_accessor :box_e

    # Employee's address. Box f IRS Form W-2.
    attr_accessor :box_f

    # Wages, tips, other compensation. Box 1 IRS Form W-2.
    attr_accessor :box_1

    # Federal income tax withheld. Box 2 IRS Form W-2.
    attr_accessor :box_2

    # Social security wages. Box 3 IRS Form W-2.
    attr_accessor :box_3

    # Social security tax withheld. Box 4 IRS Form W-2.
    attr_accessor :box_4

    # Medicare wages and tips. Box 5 IRS Form W-2.
    attr_accessor :box_5

    # Medicare tax withheld. Box 6 IRS Form W-2.
    attr_accessor :box_6

    # Social security tips. Box 7 IRS Form W-2.
    attr_accessor :box_7

    # Allocated tips. Box 8 IRS Form W-2.
    attr_accessor :box_8

    # This field is intentionally left blank.
    attr_accessor :box_9

    # Dependent care benefits. Box 10 IRS Form W-2.
    attr_accessor :box_10

    # Nonqualified plans. Box 11 IRS Form W-2.
    attr_accessor :box_11

    # Miscellaneous income or tax line items. Box 12 IRS Form W-2.
    attr_accessor :box_12

    # Statutory employee, Retirement plan, or Third-party sick pay options. Box 13 IRS Form W-2.
    attr_accessor :box_13

    # Other. Box 14 IRS Form W-2.
    attr_accessor :box_14

    # Box 15 to 20 IRS Form W-2. These boxes may contain multiple sets of values if the either the state or the locality of the employee and the employer differ, and are separately taxed.
    attr_accessor :box_15_to_20

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        document_type: :document_type,
        box_a: :box_a,
        box_b: :box_b,
        box_c: :box_c,
        box_d: :box_d,
        box_e: :box_e,
        box_f: :box_f,
        box_1: :box_1,
        box_2: :box_2,
        box_3: :box_3,
        box_4: :box_4,
        box_5: :box_5,
        box_6: :box_6,
        box_7: :box_7,
        box_8: :box_8,
        box_9: :box_9,
        box_10: :box_10,
        box_11: :box_11,
        box_12: :box_12,
        box_13: :box_13,
        box_14: :box_14,
        box_15_to_20: :box_15_to_20
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        document_type: :String,
        box_a: :String,
        box_b: :String,
        box_c: :W2BoxC,
        box_d: :String,
        box_e: :String,
        box_f: :AddressGetResponseItem,
        box_1: :Integer,
        box_2: :Integer,
        box_3: :Integer,
        box_4: :Integer,
        box_5: :Integer,
        box_6: :Integer,
        box_7: :Integer,
        box_8: :Integer,
        box_9: :String,
        box_10: :String,
        box_11: :String,
        box_12: :"Array<W2Box12>",
        box_13: :W2Box13,
        box_14: :"Array<String>",
        box_15_to_20: :"Array<W2Box15To20>"
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `Pinwheel::TaxFormW2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `Pinwheel::TaxFormW2`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      self.document_type = if attributes.key?(:document_type)
        attributes[:document_type]
      else
        "W-2"
      end

      if attributes.key?(:box_a)
        self.box_a = attributes[:box_a]
      end

      if attributes.key?(:box_b)
        self.box_b = attributes[:box_b]
      end

      if attributes.key?(:box_c)
        self.box_c = attributes[:box_c]
      end

      if attributes.key?(:box_d)
        self.box_d = attributes[:box_d]
      end

      if attributes.key?(:box_e)
        self.box_e = attributes[:box_e]
      end

      if attributes.key?(:box_f)
        self.box_f = attributes[:box_f]
      end

      if attributes.key?(:box_1)
        self.box_1 = attributes[:box_1]
      end

      if attributes.key?(:box_2)
        self.box_2 = attributes[:box_2]
      end

      if attributes.key?(:box_3)
        self.box_3 = attributes[:box_3]
      end

      if attributes.key?(:box_4)
        self.box_4 = attributes[:box_4]
      end

      if attributes.key?(:box_5)
        self.box_5 = attributes[:box_5]
      end

      if attributes.key?(:box_6)
        self.box_6 = attributes[:box_6]
      end

      if attributes.key?(:box_7)
        self.box_7 = attributes[:box_7]
      end

      if attributes.key?(:box_8)
        self.box_8 = attributes[:box_8]
      end

      if attributes.key?(:box_9)
        self.box_9 = attributes[:box_9]
      end

      if attributes.key?(:box_10)
        self.box_10 = attributes[:box_10]
      end

      if attributes.key?(:box_11)
        self.box_11 = attributes[:box_11]
      end

      if attributes.key?(:box_12)
        if (value = attributes[:box_12]).is_a?(Array)
          self.box_12 = value
        end
      end

      if attributes.key?(:box_13)
        self.box_13 = attributes[:box_13]
      end

      if attributes.key?(:box_14)
        if (value = attributes[:box_14]).is_a?(Array)
          self.box_14 = value
        end
      end

      if attributes.key?(:box_15_to_20)
        if (value = attributes[:box_15_to_20]).is_a?(Array)
          self.box_15_to_20 = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn "[DEPRECATED] the `list_invalid_properties` method is obsolete"
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn "[DEPRECATED] the `valid?` method is obsolete"
      document_type_validator = EnumAttributeValidator.new("String", ["W-2"])
      return false unless document_type_validator.valid?(@document_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_type Object to be assigned
    def document_type=(document_type)
      validator = EnumAttributeValidator.new("String", ["W-2"])
      unless validator.valid?(document_type)
        fail ArgumentError, "invalid value for \"document_type\", must be one of #{validator.allowable_values}."
      end
      @document_type = document_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
        document_type == other.document_type &&
        box_a == other.box_a &&
        box_b == other.box_b &&
        box_c == other.box_c &&
        box_d == other.box_d &&
        box_e == other.box_e &&
        box_f == other.box_f &&
        box_1 == other.box_1 &&
        box_2 == other.box_2 &&
        box_3 == other.box_3 &&
        box_4 == other.box_4 &&
        box_5 == other.box_5 &&
        box_6 == other.box_6 &&
        box_7 == other.box_7 &&
        box_8 == other.box_8 &&
        box_9 == other.box_9 &&
        box_10 == other.box_10 &&
        box_11 == other.box_11 &&
        box_12 == other.box_12 &&
        box_13 == other.box_13 &&
        box_14 == other.box_14 &&
        box_15_to_20 == other.box_15_to_20
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [document_type, box_a, box_b, box_c, box_d, box_e, box_f, box_1, box_2, box_3, box_4, box_5, box_6, box_7, box_8, box_9, box_10, box_11, box_12, box_13, box_14, box_15_to_20].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Pinwheel.const_get(type)
        (klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of)) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
